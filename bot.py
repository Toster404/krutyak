#!/usr/bin/env python
# -*- coding: utf-8 -*-
import ipaddress, asyncio, os, discord, random, traceback, sys, mc, typing, psycopg2, re, ast, platform, aiohttp, requests, logging, base64
from discord.ext import commands, tasks
from faker import Faker
from russian_names import RussianNames
from datetime import datetime, timezone, timedelta
from mc.builtin import validators, formatters
from discord import VoiceState, app_commands, Interaction, Member, User, Guild
from discord.app_commands import AppCommandError, Transform, Transformer
from io import BytesIO
from mc.builtin.formatters import usual_syntax
from discord.app_commands import Choice
from cfg import stexts_ordinary, stexts_nsfw, bot_invite_url, owner_id, guild_id, discord_url
from discord_logging.handler import DiscordHandler

bot = commands.Bot(command_prefix=commands.when_mentioned_or('.'), case_insensitive=True, help_command=None, intents=discord.Intents.all())
bot.owner_id = owner_id
bot.cd_mapping = commands.CooldownMapping.from_cooldown(10, 10, commands.BucketType.member)
snipes = {}
esnipes = {}
keepalive_kwargs = {
    "keepalives": 1,
    "keepalives_idle": 30,
    "keepalives_interval": 5,
    "keepalives_count": 5,
}
con = psycopg2.connect(os.environ.get('DATABASE_URL'), **keepalive_kwargs)
cur = con.cursor()
cur.execute("SELECT * FROM markov_chain;")
generator = mc.PhraseGenerator(samples=[r[0] for r in cur.fetchall()])
time_regex = re.compile(r"([0-9]+)(—Å–µ–∫—É–Ω–¥–∞|—Å–µ–∫—É–Ω–¥—ã|—Å–µ–∫—É–Ω–¥|—Å–µ–∫|–º–∏–Ω|–º–∏–Ω—É—Ç–∞|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–Ω–µ–π|–¥–Ω—è|–¥–µ–Ω—å|–Ω–µ–¥|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç|[—Å–º—á–¥–Ω–≥–ª])")
time_dict = {"—á": 3600, "—Å": 1, "–º": 60, "–¥": 86400, "—Å–µ–∫—É–Ω–¥–∞": 1, "—Å–µ–∫—É–Ω–¥—ã": 1, "—Å–µ–∫—É–Ω–¥": 1, "—Å–µ–∫": 1, "–º–∏–Ω": 60, "–º–∏–Ω—É—Ç–∞": 60, "–º–∏–Ω—É—Ç": 60, "–º–∏–Ω—É—Ç—ã": 60, "—á–∞—Å": 3600, "—á–∞—Å–∞": 3600, "—á–∞—Å–æ–≤": 3600, "–¥–µ–Ω—å": 86400, "–¥–Ω—è": 86400, "–¥–Ω–µ–π": 86400, "–Ω": 604800, "–Ω–µ–¥": 604800, "–Ω–µ–¥–µ–ª—è": 604800, "–Ω–µ–¥–µ–ª–∏": 604800, "–Ω–µ–¥–µ–ª—å": 604800, "–º–µ—Å": 2592000, "–º–µ—Å—è—Ü": 2592000, "–º–µ—Å—è—Ü–∞": 2592000, "–º–µ—Å—è—Ü–µ–≤": 2592000, "–≥": 31104000, "–≥–æ–¥": 31104000, "–≥–æ–¥–∞": 31104000, "–ª–µ—Ç": 31104000, "–ª": 31104000}

def serverss():
  cif = str(len(bot.guilds))
  if cif[len(cif)-1] == '1' and cif[len(cif) - 2] + cif[len(cif) - 1] != '11':
     return f"{cif} —Å–µ—Ä–≤–µ—Ä"
  elif cif[len(cif)-1] in ['2', '3', '4'] and cif[len(cif) - 2] + cif[len(cif) - 1] not in ['12', '13', '14']:
     return f"{cif} —Å–µ—Ä–≤–µ—Ä–∞"
  else:
     return f"{cif} —Å–µ—Ä–≤–µ—Ä–æ–≤"

def mac_address():
    return "%02x:%02x:%02x:%02x:%02x:%02x" % (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255), random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))

def log_channel(guild_id):
  cur.execute("SELECT channel_id FROM logs WHERE guild_id = %s", (str(guild_id),))
  return cur.fetchone()

def is_autopub(guild_id):
  cur.execute("SELECT guild_id FROM autopub WHERE guild_id = %s", (str(guild_id),))
  return cur.fetchone() != None

async def mobile(self):
    payload = {'op': self.IDENTIFY,'d': {'token': self.token,'properties': {'$os': sys.platform,'$browser': 'Discord iOS','$device': 'discord.py','$referrer': '','$referring_domain': ''},'compress': True,'large_threshold': 250,'v': 3}}
    if self.shard_id is not None and self.shard_count is not None:
        payload['d']['shard'] = [self.shard_id, self.shard_count]
    state = self._connection
    if state._activity is not None or state._status is not None: 
        payload["d"]["presence"] = {"status": state._status, "game": state._activity, "since": 0, "afk": False}
    if state._intents is not None:
        payload["d"]["intents"] = state._intents.value
    await self.call_hooks("before_identify", self.shard_id, initial=self._initial_identify)
    await self.send_as_json(payload)

def random_phone_num_generator():
    first = str(random.randint(100, 999))
    second = str(random.randint(1, 888)).zfill(3)
    last = (str(random.randint(1, 9998)).zfill(4))
    while last in ['1111', '2222', '3333', '4444', '5555', '6666', '7777', '8888']:
        last = (str(random.randint(1, 9998)).zfill(4))
    return '{}-{}-{}'.format(first, second, last)

@tasks.loop(seconds=3600)
async def snipes_update():
  global esnipes, snipes
  esnipes = {}
  snipes = {}

@tasks.loop(seconds=3600)
async def con_update():
  global con, cur
  co1 = con
  co2 = psycopg2.connect(os.environ.get('DATABASE_URL'), **keepalive_kwargs)
  cu2 = co2.cursor()
  con, cur = co2, cu2
  co1.close()

@tasks.loop(seconds=5)
async def activity_update():
  if not bot.activity:
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=f"{serverss()} | {userss()}"))
  cur.execute("SELECT * FROM giveaways")
  giveaways = cur.fetchall()
  for giveaway in giveaways:
    if int(giveaway[3]) <= int(datetime.now(timezone.utc).timestamp()):
      try:
        givmes = await (await bot.fetch_channel(giveaway[0])).fetch_message(giveaway[2])
        reaction = [reaction for reaction in givmes.reactions if reaction.emoji == 'üéâ'][0]
        givuch = [user async for user in reaction.users() if isinstance(user, Member) and not user.bot]
        givpob = []
        if len(givuch) >= int(giveaway[5]):
          for i in range(int(giveaway[5])):
            sdel = False
            while not sdel:
              predv = random.choice(givuch)
              if predv not in givpob:
                givpob.append(predv)
                sdel = True
          givpob_str = '\n'.join([f'{pob} ({pob.mention})' for pob in givpob])
          givpob_ment = ', '.join([pob.mention for pob in givpob])
        await givmes.clear_reaction('üéâ')
        if givpob:
          await givmes.edit(embed=discord.Embed(title="üéâ –†–æ–∑—ã–≥—Ä—ã—à!", description=f"**–†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–µ–Ω!**\n–ü—Ä–∏–∑: {giveaway[4]}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {len(givuch)}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ ({len(givpob)}):\n{givpob_str}", color=0x69FF00, timestamp=datetime.fromtimestamp(int(giveaway[3]), timezone.utc)))
          await givmes.reply(content=f"{givpob_ment}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å –ø–æ–±–µ–¥–æ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–∏–∑–∞ **{giveaway[4]}**!")
        else:
          await givmes.edit(embed=discord.Embed(title="üéâ –†–æ–∑—ã–≥—Ä—ã—à!", description=f"**–†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–µ–Ω!**\n–ü—Ä–∏–∑: {giveaway[4]}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç", color=0x69FF00, timestamp=datetime.fromtimestamp(int(giveaway[3]), timezone.utc)))
          await givmes.reply(embed=discord.Embed(description=f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ({len(givuch)}) –º–µ–Ω—å—à–µ, —á–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ({len(givpob)}).", title="–û—à–∏–±–∫–∞! ‚ùå", color=0xff0000))
        cur.execute("DELETE FROM giveaways WHERE message_id = %s;", (giveaway[2],))
        con.commit()
      except:
        cur.execute("DELETE FROM giveaways WHERE message_id = %s;", (giveaway[2],))
        con.commit()

async def start_zh(key):
  try:
    channel = await bot.fetch_channel(key[2])
    if isinstance(channel, discord.Thread):
      wchannel = channel.parent
    else:
      wchannel = channel
    webhooks = await wchannel.webhooks()
    webhook = [webhook for webhook in webhooks if(webhook.name == "–ö—Ä—É—Ç—è–∫")]
    if webhook:
      webhook = webhook[0]
    else:
      webhook = await wchannel.create_webhook(name="–ö—Ä—É—Ç—è–∫", avatar=await bot.user.avatar.read())
  except:
    return
  if key[4]:
    duration = datetime.fromtimestamp(int(key[4]), timezone.utc)
    if datetime.now(timezone.utc) >= duration:
      cur.execute("DELETE FROM spams WHERE channel_id = %s;", (str(channel.id),))
      con.commit()
      await channel.send("–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! ‚òëÔ∏è")
      lchannel = log_channel(channel.guild.id)
      if lchannel:
        try:
          lchannel = await bot.fetch_channel(lchannel[0])
          embed = discord.Embed(title="–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! ‚òëÔ∏è", color=0x42adf5)
          embed.add_field(name="–ö–∞–Ω–∞–ª —Å–ø–∞–º–∞:", value=f"{channel.mention} (`#{channel.name}`)")
          await lchannel.send(embed=embed)
        except:
          try:
            await channel.guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
          except:
            pass
      return
    task = asyncio.create_task(spamt(key[0], key[1], channel, webhook, key[3], duration))
  else:
    task = asyncio.create_task(spamt(key[0], key[1], channel, webhook, key[3], key[4]))
  task.name = "–ê–≤—Ç–æ—Å–ø–∞–º"
  task.channel_id = channel.id

@bot.event
async def on_ready():
  logging.info(f'–ë–æ—Ç –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫:\n{bot.user.name} (ID: {bot.user.id})\n------')
  cur.execute("select * from spams")
  results = cur.fetchall()
  [await start_zh(key) for key in results]
  con_update.start()
  activity_update.start()
  snipes_update.start()

@bot.event
async def on_raw_message_delete(event):
  cur.execute("DELETE FROM giveaways WHERE message_id = %s;", (str(event.message_id),))
  con.commit()

@bot.event
async def on_raw_bulk_message_delete(payload):
  for message_id in payload.message_ids:
    cur.execute("DELETE FROM giveaways WHERE message_id = %s;", (str(message_id),))
    con.commit()

@bot.event
async def on_guild_emojis_update(guild, before, after):
  now = datetime.now(timezone.utc) 
  lchannel = log_channel(guild.id)
  if not lchannel:
    return
  delemoji = None
  newemoji = None
  if len(before) > len(after):
    delemoji = [emoji for emoji in before if emoji not in after][0]
  elif len(before) < len(after):
    newemoji = [emoji for emoji in after if emoji not in before][0]
  else:
    try:
      upemoji = [emoji for emoji in after if emoji.name not in [emoji.name for emoji in before]][0]
      updemoji = [emoji for emoji in before if emoji.id == upemoji.id][0]
    except:
      return
  sdelal = None
  try:
    if delemoji:
      async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.emoji_delete):
        if entry.target.id == delemoji.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
          sdelal = entry.user
    elif newemoji:
      async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.emoji_create):
        if entry.target.id == newemoji.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
          sdelal = entry.user 
    else:
      async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.emoji_update):
        if entry.target.id == upemoji.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
          sdelal = entry.user 
  except:
    pass
  if delemoji:
    embed = discord.Embed(title="–£–¥–∞–ª–µ–Ω–æ —ç–º–æ–¥–∑–∏!", description=f"–ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —ç–º–æ–¥–∑–∏ [{delemoji.name}]({delemoji.url})", color=0xff3b05, timestamp=now).set_footer(text=f"ID —ç–º–æ–¥–∑–∏: {delemoji.id}")
  elif newemoji:
    embed = discord.Embed(title="–î–æ–±–∞–≤–ª–µ–Ω–æ —ç–º–æ–¥–∑–∏!", description=f"–ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —ç–º–æ–¥–∑–∏ [{newemoji.name}]({newemoji.url}) ({newemoji})", color=0x75f542, timestamp=now).set_footer(text=f"ID —ç–º–æ–¥–∑–∏: {newemoji.id}")
  else:
    embed = discord.Embed(title="–û–±–Ω–æ–≤–ª–µ–Ω–æ —ç–º–æ–¥–∑–∏!", description=f"–£ —ç–º–æ–¥–∑–∏ {upemoji} –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è —Å [{updemoji.name}]({updemoji.url}) –Ω–∞ [{upemoji.name}]({upemoji.url})", color=0x05cdff, timestamp=now).set_footer(text=f"ID —ç–º–æ–¥–∑–∏: {upemoji.id}")
  if sdelal:
    embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{sdelal} ({sdelal.mention})")
  try:
    lchannel = await bot.fetch_channel(lchannel[0])
    await lchannel.send(embed=embed)
  except:
    try:
      await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
    except:
      pass

@bot.event
async def on_guild_stickers_update(guild, before, after):
  now = datetime.now(timezone.utc) 
  lchannel = log_channel(guild.id)
  if not lchannel:
    return
  delstick = None
  newstick = None
  upstick = None
  if len(before) > len(after):
    delstick = [sticker for sticker in before if sticker not in after][0]
  elif len(before) < len(after):
    newstick = [sticker for sticker in after if sticker not in before][0]
  else:
    try:
      upstick = [sticker for sticker in after if [sticker.name, sticker.description, sticker.emoji] not in [[sticker.name, sticker.description, sticker.emoji] for sticker in before]][0]
      updstick = [sticker for sticker in before if sticker.id == upstick.id][0]
    except:
      return
  sdelal = None
  try:
    if delstick:
      async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.sticker_delete):
        if entry.target.id == delstick.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
          sdelal = entry.user
    elif newstick:
      async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.sticker_create):
        if entry.target.id == newstick.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
          sdelal = entry.user 
    else:
      async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.sticker_update):
        if entry.target.id == upstick.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
          sdelal = entry.user
  except:
    pass
  if delstick:
    embed = discord.Embed(title="–£–¥–∞–ª—ë–Ω —Å—Ç–∏–∫–µ—Ä!", description=f"–ë—ã–ª —É–¥–∞–ª—ë–Ω —Å—Ç–∏–∫–µ—Ä [{delstick.name}](https://cdn.discordapp.com/stickers/{delstick.id}.png)", color=0xff3b05, timestamp=now).set_footer(text=f"ID —Å—Ç–∏–∫–µ—Ä–∞: {delstick.id}").add_field(name="–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∑–∏:", value=f":{delstick.emoji}:")
    if delstick.description:
      embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞:", value=delstick.description)
  elif newstick:
    embed = discord.Embed(title="–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä!", description=f"–ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä [{newstick.name}](https://cdn.discordapp.com/stickers/{newstick.id}.png)", color=0x75f542, timestamp=now).set_footer(text=f"ID —Å—Ç–∏–∫–µ—Ä–∞: {newstick.id}").add_field(name="–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∑–∏:", value=f":{newstick.emoji}:")
    if newstick.description:
      embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞:", value=newstick.description)
  else:
    up_description = ""
    if updstick.name != upstick.name:
      up_description += f"–ë—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ —Å `{updstick.name}` –Ω–∞ `{upstick.name}`\n"
    if updstick.description != upstick.description:
      up_description += f"–ë—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ —Å `{updstick.description}` –Ω–∞ `{upstick.description}`\n"
    if updstick.emoji != upstick.emoji:
      up_description += f"–ë—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∏–∫–µ—Ä–∞ —Å :{updstick.emoji}: –Ω–∞ :{upstick.emoji}:"
    embed = discord.Embed(title="–û–±–Ω–æ–≤–ª—ë–Ω —Å—Ç–∏–∫–µ—Ä!", description=f"–ë—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω —Å—Ç–∏–∫–µ—Ä [{upstick.name}](https://cdn.discordapp.com/stickers/{upstick.id}.png)", color=0x05cdff, timestamp=now).set_footer(text=f"ID —Å—Ç–∏–∫–µ—Ä–∞: {upstick.id}").add_field(name="–ò–∑–º–µ–Ω–µ–Ω–∏—è:", value=up_description)
  if sdelal:
    embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{sdelal} ({sdelal.mention})")
  try:
    lchannel = await bot.fetch_channel(lchannel[0])
    try:
      await lchannel.send(embed=embed, stickers=[newstick or upstick])
    except:
      await lchannel.send(embed=embed)
  except:
    try:
      await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
    except:
      pass

@bot.event
async def on_message_edit(message_before, message_after):
    now = datetime.now(timezone.utc)
    guild = message_after.guild 
    if not guild:
      return
    lchannel = log_channel(guild.id)
    if message_after.author.bot:
      return
    try:
      esnipes[message_after.channel.id].append({'before': message_before, 'after': message_after})
    except:
      esnipes[message_after.channel.id] = []
      esnipes[message_after.channel.id].append({'before': message_before, 'after': message_after})
    if not lchannel:
      return
    embed = discord.Embed(color=0x03fcd7, title="–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", timestamp=now)
    if message_before.content and message_after.content:
      embed.description=f"**–î–æ:**```\n{message_before.content}```**–ü–æ—Å–ª–µ:**```\n{message_after.content}```"
    if message_after.content and not message_before.content:
      embed.description=f"**–î–æ —ç—Ç–æ–≥–æ –Ω–µ –±—ã–ª–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è**\n**–ü–æ—Å–ª–µ:**```\n{message_after.content}```"
    embed.add_field(name="–ö–∞–Ω–∞–ª:", value=f"{message_before.channel.mention} (`#{message_before.channel}`)")
    embed.add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:", value=f"[–ü–µ—Ä–µ–π—Ç–∏]({message_before.jump_url})")
    embed.set_author(name=message_before.author.display_name, icon_url=message_before.author.display_avatar, url=f"https://discord.com/users/{message_before.author.id}")
    embed.set_footer(text=f"ID: {message_before.id}")
    try:
      lchannel = await bot.fetch_channel(lchannel[0])
      await lchannel.send(embed=embed)
    except:
      try:
        await message_after.guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
      except:
        pass

async def add_message(message: discord.Message):
        mentioned = bot.user.mentioned_in(message)
        if mentioned and message.mention_everyone:
          return
        if message.type == discord.MessageType.reply and len(message.reference.resolved.embeds) != 0 and message.reference.resolved.author == bot.user and (bot.user.mentioned_in(message) or message.reference.resolved.type == discord.MessageType.chat_input_command):
          return
        if message.content:
          contex_regex = re.sub("https?://(?:www\.)?.+|(?:https?://)?discord(?:app)?\.(?:com/invite|gg)/[a-zA-Z0-9]+/?|<@!?(\d+)>|<@&(\d+)>|<#(\d+)>|@everyone|@here", "", message.content).strip()
          if contex_regex:
            cur.execute("SELECT data FROM markov_chain WHERE data = %s;", (contex_regex,))
            if not cur.fetchone():
              cur.execute("INSERT INTO markov_chain (data) VALUES (%s);", (contex_regex,))
              con.commit()
        try:
          cur.execute("SELECT reply_chance FROM channels_reply WHERE channel_id = %s", (str(message.channel.id),))
          if mentioned or random.random() <= float(cur.fetchone()[0]):
            await message.channel.typing()
            phrase = generator.generate_phrase(validators=[validators.chars_count(maximal=2000), validators.words_count(minimal=1)])
            phrase = random.choice([phrase, phrase.upper(), usual_syntax(phrase)])
            if mentioned:
              await message.reply(phrase, mention_author=True)
            else:
              if random.choice([True, False]):
                await message.reply(phrase, mention_author=False)
              else:
                await message.channel.send(phrase)
        except:
          pass

def is_blocked(user_id):
  cur.execute("SELECT id FROM chs WHERE id = %s;", (str(user_id),))
  if cur.fetchone():
    return True
  else:
    return False 

@bot.event
async def on_message(message: discord.Message):
      if not message.guild:
        return await bot.process_commands(message)
      if message.author == bot.user:
        return
      if isinstance(message.channel, discord.TextChannel):
        if message.channel.is_news():
          if is_autopub(message.guild.id):
            try:
              await message.publish()
            except:
              pass
      cur.execute("SELECT channel_id FROM channels_likes WHERE channel_id = %s", (str(message.channel.id),))
      if cur.fetchone():
        if bot.cd_mapping.get_bucket(message).update_rate_limit():
          cur.execute("DELETE FROM channels_likes WHERE channel_id = %s;", (str(message.channel.id),))
          con.commit()
          await message.channel.send(embed=discord.Embed(title="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –®–∫–∞–ª–∞ –ª–∞–π–∫–æ–≤ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!", description="–ü—Ä–∏—á–∏–Ω–∞: —Ñ–ª—É–¥ –≤ –∫–∞–Ω–∞–ª–µ —à–∫–∞–ª—ã", color=0xf59e42))
        else:
          try:
            await message.add_reaction('üëç')
            await asyncio.sleep(0.5)
            await message.add_reaction('üëé')
          except:
            pass
      if message.author.bot:
        return
      if message.content == bot.user.mention:
        try:
          await message.reply("–í–≤–µ–¥–∏ </—Ö–µ–ª–ø:1136698980584136804> –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö!")
        except:
          pass
        return
      if isinstance(message.channel, discord.Thread):
        cur.execute("SELECT channel_id FROM channels_reply WHERE channel_id = %s", (str(message.channel.parent_id),))
      else:
        cur.execute("SELECT channel_id FROM channels_reply WHERE channel_id = %s", (str(message.channel.id),))
      if cur.fetchone():
        if not message.content.lower().startswith(('$', '&', '%', '‚Ç¨', '¬•', '!', '.', '?', '+', '=', '~', '-', '_', 's?', 'L.', 'cp!', 'g.', 'g?', 'pls', ';', "'", 'NQN')):
          await add_message(message)
      await bot.process_commands(message)

@bot.event
async def on_thread_create(thread: discord.Thread):
  if isinstance(thread.parent, discord.ForumChannel):
    cur.execute("SELECT channel_id FROM channels_likes WHERE channel_id = %s", (str(thread.parent.id),))
    if cur.fetchone():
      try:
        message = await thread.fetch_message(thread.id)
        await message.add_reaction('üëç')
        await asyncio.sleep(0.5)
        await message.add_reaction('üëé')
      except:
        pass

@bot.tree.command(name='—Ö–µ–ª–ø', description='–°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö')
@app_commands.guild_only
async def help(interaction: Interaction):
  description = '''
</—Ö–µ–ª–ø:1136698980584136804> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
</–ª–æ–≥–∏:1136698980881944688> ‚Äî –í–∫–ª—é—á–∞–µ—Ç/–í—ã–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
</–∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è:1136698980881944689> ‚Äî –í–∫–ª—é—á–∞–µ—Ç/–í—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
</—Å–ø–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:1136698981578178594> ‚Äî –ù–∞—á–∏–Ω–∞–µ—Ç —Å–ø–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ. –¢–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç —É–ø–æ–º–∏–Ω–∞—Ç—å —Ä–æ–ª—å/—É—á–∞—Å—Ç–Ω–∏–∫–∞. –ú–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª—é–¥–∏ —Å –ø—Ä–∞–≤–æ–º –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–ø–æ–º–∏–Ω–∞—Ç—å @here —Å @everyone.
</—Å–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:1136698981578178594> ‚Äî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.
</—Å–Ω–∞–π–ø:1136698980584136806> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ.
</–µ—Å–Ω–∞–π–ø:1136698980584136805> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
</–±—É—Å—Ç—ã:1136698980881944690> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –±—É—Å—Ç—ã.
</–≥–µ–Ω—Å–æ–æ–±—â–µ–Ω–∏–π:1136698980584136809> ‚Äî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª, –≥–¥–µ –±–æ—Ç –±—É–¥–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–¥–µ–π. –ú–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–¥–∏ —Å –ø—Ä–∞–≤–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º.
</–ª–∞–π–∫–∏:1136698980584136810> ‚Äî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è —à–∫–∞–ª—ã –ª–∞–π–∫–æ–≤. –í —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏/–ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –±—É–¥—É—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è —Ä–µ–∞–∫—Ü–∏–∏ üëç –∏ üëé.
</—Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å–æ–∑–¥–∞—Ç—å:1136698981578178593> ‚Äî –°–æ–∑–¥–∞—ë—Ç —Ä–æ–∑—ã–≥—Ä—ã—à.
</—Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å:1136698981578178593> ‚Äî –û–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.
</—Ä–æ–∑—ã–≥—Ä—ã—à–∏ —É–¥–∞–ª–∏—Ç—å:1136698981578178593> ‚Äî –£–¥–∞–ª—è–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à.
</—Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å–ø–∏—Å–æ–∫:1136698981578178593> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.
</–∞–≤–∞—Ç–∞—Ä:1136698980584136813> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞.
</–±–∞–Ω–Ω–µ—Ä:1136698980584136812> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞.
</—Ç–æ–∫–µ–Ω:1136698981578178592> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–æ–∫–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
</—é–∑–µ—Ä–∏–Ω—Ñ–æ:1136698981578178591> ‚Äî –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ.
</–∏–Ω—Ñ–æ:1136698980881944687> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.
</–∫–Ω–±:1136698981578178590> ‚Äî –°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞?
</iq:1136698980584136807> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç IQ —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∏–ª–∏ –≤–∞—à.
</–≤–∑–ª–æ–º–∂–æ–ø—ã:1136698980584136808> ‚Äî ~~–®—É—Ç–æ—á–Ω–æ~~ –≤–∑–ª–∞–º—ã–≤–∞–µ—Ç –∂–æ–ø—É —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∏–ª–∏ –≤–∞—à—É.
</–¥–æ–Ω:1136698980584136811> ‚Äî –ë–æ—Ç —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –†–∞–º–∑–∞–Ω–æ–º –ö–∞–¥—ã—Ä–æ–≤—ã–º, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –æ –≤–∞—Å/—É–ø–æ–º—è–Ω—É—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø–æ–Ω—è—Ç—å –Ω–∞–≥—Ä–∞–∂–¥–∞—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –Ω–µ—Ç.
'''
  embed = discord.Embed(title='–°–ø—Ä–∞–≤–∫–∞', description=description, color=interaction.user.color)
  embed.set_author(name=interaction.user.display_name, icon_url=interaction.user.display_avatar, url=f"https://discord.com/users/{interaction.user.id}")
  await interaction.response.send_message(embed=embed)

@bot.event
async def on_bulk_message_delete(messages):
  now = int(datetime.now(timezone.utc).timestamp())
  now1 = datetime.now(timezone.utc)
  try:
    snipes[messages[0].channel.id]
  except:
    snipes[messages[0].channel.id] = []
  deleted_user = False
  perms = False
  try:
    async for entry in messages[0].guild.audit_logs(limit=1, action=discord.AuditLogAction.message_bulk_delete):
      perms = True
      if entry.target.id == messages[0].channel.id and int(entry.created_at.timestamp()) == now:
        deleted_user = entry.user
  except:
    pass
  for message in messages:
    if not message.is_system():
      try:
        try:
          snipes[message.channel.id].append({'msg': message, 'perms': perms, 'deleted_user': deleted_user, 'files': [{'bytes': await a.read(use_cached=True), 'filename': a.filename} for a in message.attachments]})
        except:
          snipes[messages[0].channel.id] = []
          snipes[message.channel.id].append({'msg': message, 'perms': perms, 'deleted_user': deleted_user, 'files': [{'bytes': await a.read(use_cached=True), 'filename': a.filename} for a in message.attachments]})
      except:
        try:
          snipes[message.channel.id].append({'msg': message, 'perms': perms, 'deleted_user': deleted_user, 'files': [{'bytes': await a.read(use_cached=False), 'filename': a.filename} for a in message.attachments]})
        except:
          snipes[messages[0].channel.id] = []
          snipes[message.channel.id].append({'msg': message, 'perms': perms, 'deleted_user': deleted_user, 'files': [{'bytes': await a.read(use_cached=False), 'filename': a.filename} for a in message.attachments]})
  guild = messages[0].guild
  lchannel = log_channel(guild.id)
  if lchannel:
      embed = discord.Embed(color=0xfc4103, title=f"–û—á–∏—â–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π!", description=f"–ö–∞–Ω–∞–ª: {messages[0].channel.mention} (`#{messages[0].channel}`)", timestamp=now1)
      if deleted_user != False:
        embed.add_field(name="–°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–∏–ª:", value = f"{deleted_user} ({deleted_user.mention})")
      messages_str = ""
      for message in messages:
        if not message.author.bot:
          message_str = f"<{message.author}>\n{message.content}"
          if message.attachments:
            message_str += f"\n[–í–ª–æ–∂–µ–Ω–∏—è:]\n{', '.join([a.proxy_url for a in message.attachments])}"
          if message.stickers:
            message_str += f"\n[–°—Ç–∏–∫–µ—Ä—ã:]\n{', '.join([s.url for s in message.stickers])}"
          message_str += "\n"
          messages_str += f"\n{message_str}"
      with open(f"{messages[0].channel.id}.txt", "w+", encoding="utf-8") as ds:
        ds.write(messages_str)
      try:
        lchannel = await bot.fetch_channel(lchannel[0])
        await lchannel.send(embed=embed, file=discord.File(f"{messages[0].channel.id}.txt"))
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass 
      os.remove(f"{messages[0].channel.id}.txt")
  
@bot.event
async def on_message_delete(message: discord.Message):
  if message.is_system() or message.author == bot.user:
    return
  if not message.guild:
    return
  now = int(datetime.now(timezone.utc).timestamp())
  now1 = datetime.now(timezone.utc)
  try:
    snipes[message.channel.id]
  except:
    snipes[message.channel.id] = []
  sdict = {}
  sdict['msg'] = message
  sdict['deleted_user'] = False
  sdict['perms'] = False
  try:
    sdict['files'] = [{'bytes': await a.read(use_cached=True), 'filename': a.filename} for a in message.attachments]
  except:
    sdict['files'] = [{'bytes': await a.read(use_cached=False), 'filename': a.filename} for a in message.attachments]
  try:
    async for entry in message.guild.audit_logs(limit=1, action=discord.AuditLogAction.message_delete):
      sdict['perms'] = True
      if entry.target == message.author and entry.extra.channel.id == message.channel.id and int(entry.created_at.timestamp()) == now:
        sdict['deleted_user'] = entry.user
  except:
    pass
  snipes[message.channel.id].append(sdict)
  guild = message.guild
  lchannel = log_channel(guild.id)
  if lchannel:
      embed = discord.Embed(color=0xfc4103, title="–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!", timestamp=now1)
      if message.content:
        embed.description = f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**```\n{message.content}```"
      embed.set_author(name=message.author.display_name, icon_url=message.author.display_avatar.url, url=f"https://discord.com/users/{message.author.id}")
      embed.add_field(name="–ö–∞–Ω–∞–ª:", value=f"{message.channel.mention} (`#{message.channel}`)")
      if message.type == discord.MessageType.reply:
        embed.add_field(name="–û—Ç–≤–µ—Ç–∏–ª –Ω–∞:", value=f"[–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ]({message.reference.resolved.jump_url})")
      if sdict['deleted_user'] != False:
        embed.add_field(name="–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏–ª:", value = f"{sdict['deleted_user']} ({sdict['deleted_user'].mention})")
      if message.stickers:
        sr = ""
        for sticker in message.stickers:
          sr += f"\n[{sticker.name}]({sticker.url}) (ID: {sticker.id})"
        embed.add_field(name="–°—Ç–∏–∫–µ—Ä—ã:", value = sr)
      files = [discord.File(BytesIO(field['bytes']), filename=field['filename']) for field in sdict['files']]
      embed.set_footer(text=f"ID: {message.id}")
      try:
        lchannel = await bot.fetch_channel(lchannel[0])
        await lchannel.send(embed=embed, files=files)
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass

async def snippet(ci: Interaction, channel, index: int, view=None, method: str=None):
  snipess = snipes[channel.id]
  rpos = len(snipess)
  try:
    snipess = snipess[int(index)]
  except:
    return await ci.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ü—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑"), ephemeral=True)
  await ci.response.defer()
  s: discord.Message = snipess['msg']
  prava = snipess['perms']
  sniped_embed = discord.Embed(timestamp=s.created_at, color=s.author.color, description=s.content)
  sniped_embed.set_author(name=s.author.display_name, icon_url=s.author.display_avatar.url, url=f"https://discord.com/users/{s.author.id}")
  if s.type == discord.MessageType.reply:
    try:
      sniped_embed.add_field(name="–û—Ç–≤–µ—Ç–∏–ª –Ω–∞:", value=f"[–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ]({s.reference.resolved.jump_url})")
    except:
      sniped_embed.add_field(name="–û—Ç–≤–µ—Ç–∏–ª –Ω–∞:", value=f"–£–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
  if prava:
    deleted_user = snipess['deleted_user']
    if deleted_user:
     sniped_embed.add_field(name="–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏–ª:", value = f"{deleted_user} ({deleted_user.mention})")
  else:
    sniped_embed.add_field(name="–í–Ω–∏–º–∞–Ω–∏–µ!", value = "–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∂—É—Ä–Ω–∞–ª—É –∞—É–¥–∏—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã!")
  files = [discord.File(BytesIO(field['bytes']), filename=field['filename']) for field in snipess['files']]
  if s.stickers:
    sr = ""
    for sticker in s.stickers:
      sr += f"\n[{sticker.name}]({sticker.url}) (ID: {sticker.id})"
    sniped_embed.add_field(name="–°—Ç–∏–∫–µ—Ä—ã:", value = sr)
  if s.components:
    cr = ""
    for component in s.components:
      if isinstance(component, discord.Button):
        opis = f"{component.emoji or component.label}"
        if component.label and component.emoji:
          opis += f"{ component.label}"
        cr += f"\n–ö–Ω–æ–ø–∫–∞ ({opis})"

    sniped_embed.add_field(name="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:", value=cr)
  sniped_embed.add_field(name="–ü–æ–∑–∏—Ü–∏—è:", value=f"{index + 1} / {rpos}")
  if not view:
    view = snipe_archive(timeout=300)
  else:
    view.timeout = 300
  view.channel_id = channel.id
  view.author_id = ci.user.id
  embeds = [sniped_embed]
  if s.embeds and s.author.bot:
    if embeds[0].type == 'rich':
      embeds.insert(0, s.embeds[0])
  try:
    if method == "send":
      await ci.followup.send(embeds=embeds, files=files, view=view)
      view.message = await ci.original_response()
    elif method == "button_response":
      view.message = await ci.original_response()
      await ci.edit_original_response(embeds=embeds, attachments=files, view=view)
  except:
    if method == "send":
      await ci.followup.send(embeds=embeds, view=view, content="\n".join([a.proxy_url for a in s.attachments]))
      view.message = await ci.original_response()
    elif method == "button_response":
      view.message = await ci.original_response()
      await ci.edit_original_response(embeds=embeds, view=view, content="\n".join([a.proxy_url for a in s.attachments]))

@bot.tree.command(name="–µ—Å–Ω–∞–π–ø", description = "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
@app_commands.guild_only
@app_commands.describe(channel='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', position='–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é')
async def esnipe(interaction: Interaction, channel: typing.Union[discord.StageChannel, discord.TextChannel, discord.VoiceChannel, discord.Thread]=None, position: int=None):
  if not channel:
    channel = interaction.channel
  if channel.is_nsfw() and not interaction.channel.is_nsfw():
    return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ù–µ–ª—å–∑—è —Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å NSFW –∫–∞–Ω–∞–ª–∞ –≤ –∫–∞–Ω–∞–ª–µ –±–µ–∑ —ç—Ç–æ–π –º–µ—Ç–∫–∏!"), ephemeral=True)
  rpos = len(esnipes[channel.id])
  if not position:
    position = rpos - 1
  else:
    position = position - 1
  es = esnipes[channel.id][position]
  before = es['before']
  after = es['after']
  if not before.content:
    before.content = "**–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è**"
  if not after.content:
    after.content = "**–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è**"
  view = esnipe_archive(timeout=300)
  view.channel_id = channel.id
  view.author_id = interaction.user.id
  await interaction.response.send_message(view=view, embed=discord.Embed(description=f"**–î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n{before.content}\n**–ü–æ—Å–ª–µ:**\n{after.content}", color=before.author.color).set_author(name=before.author.display_name, icon_url=before.author.display_avatar.url, url=f"https://discord.com/users/{before.author.id}").add_field(name="–ü–æ–∑–∏—Ü–∏—è:", value=f"{position + 1} / {rpos}").add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", value=f"[–ü–µ—Ä–µ–π—Ç–∏]({after.jump_url})"))
  view.message = await interaction.original_response()

@bot.tree.command(name='—Å–Ω–∞–π–ø', description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ')
@app_commands.guild_only
@app_commands.describe(channel='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', position='–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é')
async def snipe(interaction: Interaction, channel: typing.Union[discord.StageChannel, discord.TextChannel, discord.VoiceChannel, discord.Thread]=None, position: int=None):
  if not channel:
    channel = interaction.channel
  if channel.is_nsfw() and not interaction.channel.is_nsfw():
    return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ù–µ–ª—å–∑—è —Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å NSFW –∫–∞–Ω–∞–ª–∞ –≤ –∫–∞–Ω–∞–ª–µ –±–µ–∑ —ç—Ç–æ–π –º–µ—Ç–∫–∏!"), ephemeral=True)
  if not position:
    position = len(snipes[channel.id]) - 1
  else:
    position = position - 1
  await snippet(interaction, channel, position, None, "send")

@snipe.error
async def snipe_error(interaction, error):
  if isinstance(getattr(error, "original", error), KeyError):
    await interaction.response.send_message(embed=discord.Embed(description="–ù–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ, –ª–∏–±–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é!", color=interaction.user.color), ephemeral=True)
  
@esnipe.error
async def esnipe_error(interaction, error):
  if isinstance(getattr(error, "original", error), KeyError):
    await interaction.response.send_message(embed=discord.Embed(description="–ù–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ, –ª–∏–±–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é!", color=interaction.user.color), ephemeral=True)

class esnipe_archive(discord.ui.View):
  async def on_timeout(self) -> None:
    if self.message.embeds[0].title == "‚úÖ –£—Å–ø–µ—à–Ω–æ!":
      return
    for item in self.children:
      item.disabled = True
    try:
      await self.message.edit(view=self)
    except:
      pass

  @discord.ui.button(style=discord.ButtonStyle.blurple, emoji="‚¨Ö")
  async def eback(self, interaction: Interaction, button: discord.ui.Button):
    ipos = None
    for field in interaction.message.embeds[0].fields:
      if field.name == "–ü–æ–∑–∏—Ü–∏—è:":
        ipos = int(field.value.split()[0]) - 2
    if interaction.user.id != self.author_id:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É!", color=0xff0000), ephemeral=True)
    if ipos < 0:
      ipos = len(esnipes[self.channel_id]) - 1
    try:
      rpos = len(esnipes[self.channel_id])
      esnipes[self.channel_id][ipos]
    except:
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å–±—Ä–æ—Å–∏–ª, –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª –∞—Ä—Ö–∏–≤"), ephemeral=True)
    await interaction.response.defer()
    channel = await bot.fetch_channel(self.channel_id)
    self.timeout = 300
    es = esnipes[channel.id][ipos]
    before = es['before']
    after = es['after']
    if not before.content:
      before.content = "**–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è**"
    if not after.content:
      after.content = "**–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è**"
    await interaction.edit_original_response(view=self, embed=discord.Embed(description=f"**–î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n{before.content}\n**–ü–æ—Å–ª–µ:**\n{after.content}", color=before.author.color).set_author(name=before.author.display_name, icon_url=before.author.display_avatar.url, url=f"https://discord.com/users/{before.author.id}").add_field(name="–ü–æ–∑–∏—Ü–∏—è:", value=f"{ipos + 1} / {rpos}").add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", value=f"[–ü–µ—Ä–µ–π—Ç–∏]({after.jump_url})"))

  @discord.ui.button(style=discord.ButtonStyle.blurple, emoji="‚û°")
  async def esoon(self, interaction: Interaction, button: discord.ui.Button):
    ipos = None
    for field in interaction.message.embeds[0].fields:
      if field.name == "–ü–æ–∑–∏—Ü–∏—è:":
        ipos = int(field.value.split()[0])
    if interaction.user.id != self.author_id:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É!", color=0xff0000), ephemeral=True)
    if ipos >= len(esnipes[self.channel_id]):
      ipos = 0
    try:
      rpos = len(esnipes[self.channel_id])
      esnipes[self.channel_id][ipos]
    except:
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å–±—Ä–æ—Å–∏–ª, –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª –∞—Ä—Ö–∏–≤"), ephemeral=True)
    await interaction.response.defer()
    channel = await bot.fetch_channel(self.channel_id)
    self.timeout = 300
    es = esnipes[channel.id][ipos]
    before = es['before']
    after = es['after']
    if not before.content:
      before.content = "**–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è**"
    if not after.content:
      after.content = "**–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è**"
    await interaction.edit_original_response(view=self, embed=discord.Embed(description=f"**–î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n{before.content}\n**–ü–æ—Å–ª–µ:**\n{after.content}", color=before.author.color).set_author(name=before.author.display_name, icon_url=before.author.display_avatar.url, url=f"https://discord.com/users/{before.author.id}").add_field(name="–ü–æ–∑–∏—Ü–∏—è:", value=f"{ipos + 1} / {rpos}").add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", value=f"[–ü–µ—Ä–µ–π—Ç–∏]({after.jump_url})"))

  @discord.ui.button(style=discord.ButtonStyle.red, emoji="üóëÔ∏è")
  async def edelete(self, interaction: Interaction, button: discord.ui.Button):
    if len(interaction.message.embeds) > 1:
      epos = 1
    else:
      epos = 0
    for field in interaction.message.embeds[epos].fields:
      if field.name == "–ü–æ–∑–∏—Ü–∏—è:":
        position = int(field.value.split()[0]) - 1
    channel = await bot.fetch_channel(self.channel_id)
    if not channel.permissions_for(interaction.user).manage_messages:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏!", color=0xff0000), ephemeral=True)
    try:
      snipess = esnipes[self.channel_id][position]
      if int(interaction.message.embeds[epos].author.url.replace("https://discord.com/users/", "")) == snipess['msg'].author.id:
        esnipes[self.channel_id].pop(position)
      else:
        await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞!", color=0xff0000), ephemeral=True)
        return await interaction.followup.delete_message(interaction.message.id)
    except:
      await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞!", color=0xff0000), ephemeral=True)
      return await interaction.followup.delete_message(interaction.message.id)
    emb = discord.Embed(title="‚úÖ –£—Å–ø–µ—à–Ω–æ!", color=0x2ecc71, description=f"–ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–µ–π {position + 1} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!", timestamp=datetime.now(timezone.utc))
    emb.set_author(name=interaction.user.display_name, icon_url=interaction.user.display_avatar, url=f"https://discord.com/users/{interaction.user.id}")
    await interaction.response.edit_message(embed=emb, attachments=[], view=None)

  @discord.ui.button(style=discord.ButtonStyle.red, emoji="üßπ")
  async def ereset(self, interaction: Interaction, button: discord.ui.Button):
    if not interaction.user.guild_permissions.manage_messages:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏!", color=0xff0000), ephemeral=True)
    try:
      esnipes.pop(self.channel_id)
    except:
      pass
    emb = discord.Embed(title="‚úÖ –£—Å–ø–µ—à–Ω–æ!", color=0x2ecc71, description=f"–í–µ—Å—å –∞—Ä—Ö–∏–≤ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±—ã–ª —Å—Ç—ë—Ä—Ç!", timestamp=datetime.now(timezone.utc))
    emb.set_author(name=interaction.user.display_name, icon_url=interaction.user.display_avatar, url=f"https://discord.com/users/{interaction.user.id}")
    await interaction.response.edit_message(embed=emb, attachments=[], view=None)

class snipe_archive(discord.ui.View):
  async def on_timeout(self) -> None:
    if self.message.embeds[0].title == "‚úÖ –£—Å–ø–µ—à–Ω–æ!":
      return
    for item in self.children:
      item.disabled = True
    try:
      await self.message.edit(view=self)
    except:
      pass

  @discord.ui.button(style=discord.ButtonStyle.blurple, emoji="‚¨Ö")
  async def back(self, interaction: Interaction, button: discord.ui.Button):
    ipos = None
    epos = 0
    if len(interaction.message.embeds) > 1:
      epos = 1
    for field in interaction.message.embeds[epos].fields:
      if field.name == "–ü–æ–∑–∏—Ü–∏—è:":
        ipos = int(field.value.split()[0]) - 2
    if interaction.user.id != self.author_id:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É!", color=0xff0000), ephemeral=True)
    if ipos < 0:
      ipos = len(snipes[self.channel_id]) - 1
    try:
      snipes[self.channel_id][ipos]
    except:
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å–±—Ä–æ—Å–∏–ª, –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª –∞—Ä—Ö–∏–≤"), ephemeral=True)
    channel = await bot.fetch_channel(self.channel_id)
    await snippet(interaction, channel, ipos, self, "button_response")

  @discord.ui.button(style=discord.ButtonStyle.blurple, emoji="‚û°")
  async def soon(self, interaction: Interaction, button: discord.ui.Button):
    ipos = None
    epos = 0
    if len(interaction.message.embeds) > 1:
      epos = 1
    for field in interaction.message.embeds[epos].fields:
      if field.name == "–ü–æ–∑–∏—Ü–∏—è:":
        ipos = int(field.value.split()[0])
    if interaction.user.id != self.author_id:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É!", color=0xff0000), ephemeral=True)
    if ipos >= len(snipes[self.channel_id]):
      ipos = 0
    try:
      snipes[self.channel_id][ipos]
    except:
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å–±—Ä–æ—Å–∏–ª, –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª –∞—Ä—Ö–∏–≤"), ephemeral=True)
    channel = await bot.fetch_channel(self.channel_id)
    await snippet(interaction, channel, ipos, self, "button_response")

  @discord.ui.button(style=discord.ButtonStyle.red, emoji="üóëÔ∏è")
  async def sdelete(self, interaction: Interaction, button: discord.ui.Button):
    if len(interaction.message.embeds) > 1:
      epos = 1
    else:
      epos = 0
    for field in interaction.message.embeds[epos].fields:
      if field.name == "–ü–æ–∑–∏—Ü–∏—è:":
        position = int(field.value.split()[0]) - 1
    channel = await bot.fetch_channel(self.channel_id)
    if not channel.permissions_for(interaction.user).manage_messages:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏!", color=0xff0000), ephemeral=True)
    try:
      snipess = snipes[self.channel_id][position]
      if int(interaction.message.embeds[epos].author.url.replace("https://discord.com/users/", "")) == snipess['msg'].author.id:
        snipes[self.channel_id].pop(position)
      else:
        await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞!", color=0xff0000), ephemeral=True)
        return await interaction.followup.delete_message(interaction.message.id)
    except:
      await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞!", color=0xff0000), ephemeral=True)
      return await interaction.followup.delete_message(interaction.message.id)
    emb = discord.Embed(title="‚úÖ –£—Å–ø–µ—à–Ω–æ!", color=0x2ecc71, description=f"–ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–µ–π {position + 1} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!", timestamp=datetime.now(timezone.utc))
    emb.set_author(name=interaction.user.display_name, icon_url=interaction.user.display_avatar, url=f"https://discord.com/users/{interaction.user.id}")
    await interaction.response.edit_message(embed=emb, attachments=[], view=None)

  @discord.ui.button(style=discord.ButtonStyle.red, emoji="üßπ")
  async def sreset(self, interaction: Interaction, button: discord.ui.Button):
    if not interaction.user.guild_permissions.manage_messages:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏!", color=0xff0000), ephemeral=True)
    try:
      snipes.pop(self.channel_id)
    except:
      pass
    emb = discord.Embed(title="‚úÖ –£—Å–ø–µ—à–Ω–æ!", color=0x2ecc71, description=f"–í–µ—Å—å –∞—Ä—Ö–∏–≤ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±—ã–ª —Å—Ç—ë—Ä—Ç!", timestamp=datetime.now(timezone.utc))
    emb.set_author(name=interaction.user.display_name, icon_url=interaction.user.display_avatar, url=f"https://discord.com/users/{interaction.user.id}")
    await interaction.response.edit_message(embed=emb, attachments=[], view=None)

def verbose_timedelta(t: timedelta) -> str:
    cif_str = ""
    if t >= timedelta(days=365):
      cif = int(t.days/365)
      t = t - timedelta(days=cif*365)
      if cif in [1, 21, 31, 41, 51]:
        cif_str += f"{cif} –≥–æ–¥ "
      elif cif in [2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, 53, 54]:
        cif_str += f"{cif} –≥–æ–¥–∞ "
      else:
        cif_str += f"{cif} –ª–µ—Ç "
    if t < timedelta(days=365) and t >= timedelta(days=30):
      cif = int(t.days/30)
      t = t - timedelta(days=cif*30)
      if cif in [1, 21, 31, 41, 51]:
        cif_str += f"{cif} –º–µ—Å—è—Ü "
      elif cif in [2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, 53, 54]:
        cif_str += f"{cif} –º–µ—Å—è—Ü–∞ "
      else:
        cif_str += f"{cif} –º–µ—Å—è—Ü–µ–≤ " 
    if t < timedelta(days=30) and t >= timedelta(days=1):
      cif = t.days
      t = t - timedelta(days=cif)
      if cif in [1, 21, 31, 41, 51]:
        cif_str += f"{cif} –¥–µ–Ω—å "
      elif cif in [2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, 53, 54]:
        cif_str += f"{cif} –¥–Ω—è "
      else:
        cif_str += f"{cif} –¥–Ω–µ–π "
    if t < timedelta(days=1) and t >= timedelta(hours=1):
      cif = int(t.total_seconds()/3600)
      t = t - timedelta(hours=cif)
      if cif in [1, 21, 31, 41, 51]:
        cif_str += f"{cif} —á–∞—Å "
      elif cif in [2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, 53, 54]:
        cif_str += f"{cif} —á–∞—Å–∞ "
      else:
        cif_str += f"{cif} —á–∞—Å–æ–≤ "
    if t < timedelta(hours=1) and t >= timedelta(minutes=1):
      cif = int(t.total_seconds()/60)
      t = t - timedelta(minutes=cif)
      if cif in [1, 21, 31, 41, 51]:
        cif_str += f"{cif} –º–∏–Ω—É—Ç—É "
      elif cif in [2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, 53, 54]:
        cif_str += f"{cif} –º–∏–Ω—É—Ç—ã "
      else:
        cif_str += f"{cif} –º–∏–Ω—É—Ç " 
    if t < timedelta(minutes=1) and t >= timedelta(seconds=1):
      cif = t.seconds
      t = t - timedelta(seconds=cif)
      if cif in [1, 21, 31, 41, 51]:
        cif_str += f"{cif} —Å–µ–∫—É–Ω–¥—É"
      elif cif in [2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, 53, 54]:
        cif_str += f"{cif} —Å–µ–∫—É–Ω–¥—ã"
      else:
        cif_str += f"{cif} —Å–µ–∫—É–Ω–¥"
    if cif_str[len(cif_str) - 1] == " ":
      cif_str = cif_str[:-1]
    return cif_str

@bot.event
async def on_member_remove(member: Member):
    now = datetime.now(timezone.utc)
    guild = member.guild
    channel = log_channel(guild.id)
    if channel:
      if member.bot:
        embed = discord.Embed(color=0x03fcf0, description=f"–ë–æ—Ç **{member}** ({member.mention}) —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞", timestamp=now)
        embed.set_footer(text=f"ID: {member.id}")
        embed.set_thumbnail(url=member.display_avatar.url)
        try:
          channel = await bot.fetch_channel(channel[0])
          return await channel.send(embed=embed)
        except:
          try:
            await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
          except:
            pass
      try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.ban):
          if entry.target.id == member.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
            return
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.kick):
          if entry.target.id == member.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
            embed = discord.Embed(color=0xeb7d34, description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{member}** ({member.mention}) –∫–∏–∫–Ω—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞", timestamp=now)
            embed.set_footer(text=f"ID: {member.id}")
            embed.set_thumbnail(url=member.display_avatar.url)
            embed.add_field(name="–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:", value=f"<t:{int(member.created_at.timestamp())}:R>")
            embed.add_field(name="–ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", value=f"{verbose_timedelta(datetime.now(timezone.utc) - member.joined_at)} (–ó–∞—à—ë–ª: <t:{int(member.joined_at.timestamp())}>)")
            embed.add_field(name=f"–†–æ–ª–∏ ({len(member.roles)}):", value="\n".join(list(reversed([role.mention if role != guild.default_role else "@everyone" for role in member.roles]))))
            embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:", value=f"{entry.user} ({entry.user.mention})")
            if entry.reason:
              embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞:", value=entry.reason)
            return await channel.send(embed=embed)
      except:
        pass
      embed = discord.Embed(color=0xe1eb34, description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{member}** ({member.mention}) –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞", timestamp=now)
      embed.set_footer(text=f"ID: {member.id}")
      embed.set_thumbnail(url=member.display_avatar.url)
      embed.add_field(name="–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:", value=f"<t:{int(member.created_at.timestamp())}:R>")
      embed.add_field(name="–ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", value=f"{verbose_timedelta(datetime.now(timezone.utc) - member.joined_at)} (–ó–∞—à—ë–ª: <t:{int(member.joined_at.timestamp())}>)")
      embed.add_field(name=f"–†–æ–ª–∏ ({len(member.roles)}):", value="\n".join(list(reversed([role.mention if role != guild.default_role else "@everyone" for role in member.roles]))))
      try:
        channel = await bot.fetch_channel(channel[0])
        await channel.send(embed=embed)
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass

@bot.event
async def on_member_join(member: Member):
  guild = member.guild
  channel = log_channel(guild.id)
  if channel:
    if member.bot:
      embed = discord.Embed(color=0x03fcf0, description=f"–ë–æ—Ç **{member}** ({member.mention}) –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä", timestamp=member.joined_at)
      embed.set_footer(text=f"ID: {member.id}")
      embed.set_thumbnail(url=member.display_avatar.url)
      try:
        channel = await bot.fetch_channel(channel[0])
        return await channel.send(embed=embed)
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass
    embed = discord.Embed(color=0xa3ff5c, description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{member}** ({member.mention}) –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä", timestamp=member.joined_at)
    embed.set_footer(text=f"ID: {member.id}")
    embed.set_thumbnail(url=member.display_avatar.url)
    embed.add_field(name="–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:", value=f"<t:{int(member.created_at.timestamp())}:R>")
    try:
      channel = await bot.fetch_channel(channel[0])
      await channel.send(embed=embed)
    except:
      try:
        await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
      except:
        pass

@bot.event
async def on_member_update(before, after):
 now = datetime.now(timezone.utc)
 lchannel = log_channel(after.guild.id)
 if not (after.guild.id in [967133588422266890, 956636182903652364] or lchannel):
     return
 if len(before.roles) < len(after.roles):
     newRole = next(role for role in after.roles if role not in before.roles)
     guild = after.guild
     embed = discord.Embed(color=0x42e6f5, title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞", description=f"–£—á–∞—Å—Ç–Ω–∏–∫—É {after} ({after.mention}) –¥–æ–±–∞–≤–∏–ª–∏ —Ä–æ–ª—å {newRole.mention} (`@{newRole}`)", timestamp=now)
     embed.set_thumbnail(url=after.display_avatar.url)
     embed.set_footer(text=f"ID: {after.id}")
     try:
       async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_role_update):
         if entry.target.id == after.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
           embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{entry.user} ({entry.user.mention})")
     except:
       pass
     try:
       lchannel = await bot.fetch_channel(lchannel[0])
       await lchannel.send(embed=embed)
     except:
       try:
         await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
       except:
         pass
 if len(before.roles) > len(after.roles):
     newRole = next(role for role in before.roles if role not in after.roles)
     guild = after.guild
     try:
       guild.get_role(newRole.id)
     except:
       return
     embed = discord.Embed(color=0x42e6f5, title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞", description=f"–£ {after} ({after.mention}) —É–±—Ä–∞–ª–∏ —Ä–æ–ª—å {newRole.mention} (`@{newRole}`)", timestamp=now) 
     embed.set_footer(text=f"ID: {after.id}")
     embed.set_thumbnail(url=after.display_avatar.url)
     try:
       async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_role_update):
         if entry.target.id == after.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
           embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{entry.user} ({entry.user.mention})")
     except:
       pass
     try:
       lchannel = await bot.fetch_channel(lchannel[0])
       await lchannel.send(embed=embed)
     except:
       try:
         await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
       except:
         pass
 if before.nick != after.nick:
     guild = after.guild
     embed = discord.Embed(color=0x42e6f5, title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞", timestamp=now)
     embed.set_footer(text=f"ID: {after.id}")
     embed.set_thumbnail(url=after.display_avatar.url)
     if before.nick and after.nick:
       embed.description=f"–£ {after} ({after.mention}) –ø–æ–º–µ–Ω—è–ª—Å—è –Ω–∏–∫–Ω–µ–π–º —Å **{before.nick}** –Ω–∞ **{after.nick}**"
     elif before.nick and not after.nick:
       embed.description=f"–£ {after} ({after.mention}) –±—ã–ª —É–¥–∞–ª—ë–Ω –Ω–∏–∫–Ω–µ–π–º **{before.nick}**"
     else:
       embed.description=f"–£ {after} ({after.mention}) –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º **{after.nick}**"
     try:
       async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
         if entry.target.id == after.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
           embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{entry.user} ({entry.user.mention})")
     except:
       pass
     try:
       lchannel = await bot.fetch_channel(lchannel[0])
       await lchannel.send(embed=embed)
     except:
       try:
         await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
       except:
         pass

@bot.event
async def on_member_unban(guild, user):
    now = datetime.now(timezone.utc)
    channel = log_channel(guild.id)
    if channel:
      embed = discord.Embed(color=0x49fc03, description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{user}** ({user.mention}) –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω", timestamp=now)
      embed.set_footer(text=f"ID: {user.id}")
      embed.set_thumbnail(url=user.display_avatar.url)
      embed.add_field(name="–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:", value=f"<t:{int(user.created_at.timestamp())}:R>")
      try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.unban):
          if entry.target.id == user.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
            embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:", value=f"{entry.user} ({entry.user.mention})")
            if entry.reason:
              embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞:", value=entry.reason)
      except:
        pass
      try:
        channel = await bot.fetch_channel(channel[0])
        await channel.send(embed=embed)
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass
  
@bot.event
async def on_guild_role_create(role):
    guild = role.guild
    lchannel = log_channel(guild.id)
    if lchannel:
      embed = discord.Embed(color=0x2cadf5, description=f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å: {role.mention} (`@{role}`)", timestamp=datetime.now(timezone.utc))
      embed.set_footer(text=f"ID: {role.id}")
      try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.role_create):
          if entry.target.id == role.id:
            embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{entry.user} ({entry.user.mention})")
      except:
        pass
      try:
        lchannel = await bot.fetch_channel(lchannel[0])
        await lchannel.send(embed=embed)
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass

@bot.event
async def on_guild_role_delete(role):
    guild = role.guild
    lchannel = log_channel(guild.id)
    if lchannel:
      embed = discord.Embed(color=0xf5412c, description=f"–£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å: `@{role}`", timestamp=datetime.now(timezone.utc))
      embed.set_footer(text=f"ID: {role.id}")
      try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.role_delete):
          if entry.target.id == role.id:
            embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{entry.user} ({entry.user.mention})")
      except:
        pass
      try:
        lchannel = await bot.fetch_channel(lchannel[0])
        await lchannel.send(embed=embed)
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass

@bot.event
async def on_guild_channel_create(channel):
  guild = channel.guild
  lchannel = log_channel(guild.id)
  if lchannel:
      embed = discord.Embed(color=0x34ebae, description=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: {channel.mention} (`#{channel}`)", timestamp=datetime.now(timezone.utc))
      embed.set_footer(text=f"ID: {channel.id}")
      try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_create):
          if entry.target.id == channel.id:
            embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{entry.user} ({entry.user.mention})")
      except:
        pass
      try:
        lchannel = await bot.fetch_channel(lchannel[0])
        await lchannel.send(embed=embed)
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass

@bot.event
async def on_member_ban(guild, member):
  now = datetime.now(timezone.utc)
  channel = log_channel(guild.id)
  if channel:
      if member.bot:
        return
      embed = discord.Embed(color=0xf59b42, description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{member}** ({member.mention}) –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω", timestamp=now)
      embed.set_footer(text=f"ID: {member.id}")
      embed.set_thumbnail(url=member.display_avatar.url)
      embed.add_field(name="–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:", value=f"<t:{int(member.created_at.timestamp())}:R>")
      if isinstance(member, Member):
        embed.add_field(name="–ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", value=f"{verbose_timedelta(datetime.now(timezone.utc) - member.joined_at)} (–ó–∞—à—ë–ª: <t:{int(member.joined_at.timestamp())}>)")
        embed.add_field(name=f"–†–æ–ª–∏ ({len(member.roles)}):", value="\n".join(list(reversed([role.mention if role != guild.default_role else "@everyone" for role in member.roles]))))
      try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.ban):
          if entry.target.id == member.id and int(entry.created_at.timestamp()) == int(now.timestamp()):
            embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:", value=f"{entry.user} ({entry.user.mention})")
            if entry.reason:
              embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞:", value=entry.reason)
      except:
        pass
      try:
        channel = await bot.fetch_channel(channel[0])
        await channel.send(embed=embed)
      except:
        try:
          await guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass
     
@bot.tree.command(name="iq", description="–í—ã—á–∏—Å–ª—è–µ—Ç IQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@app_commands.guild_only
@app_commands.describe(member='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
async def intelligence(interaction: Interaction, member: User=None):
    if not member:
      member = interaction.user
    await interaction.response.send_message(content=member.mention, embed=discord.Embed(title = 'IQ –≤—ã—á–∏—Å–ª–µ–Ω–æ!', description = f'{member.mention} –£ –≤–∞—Å {random.randint(0, 200)} IQ!', color = 0x4FFFB7))

@bot.tree.command(name="–≤–∑–ª–æ–º–∂–æ–ø—ã", description="–í–∑–ª–∞–º—ã–≤–∞–µ—Ç –∂–æ–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@app_commands.guild_only
@app_commands.describe(member='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
async def hack(interaction: Interaction, member: User=None):
   if not member:
      member = interaction.user
   await interaction.response.defer()
   await interaction.followup.send(content=f"\nIP –∞–¥—Ä–µ—Å (IPv4): {random.randint(100, 250)}.{random.randint(100, 250)}.{random.randint(0, 9)}.{random.randint(0, 9)}")
   try:
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"IP –∞–¥—Ä–µ—Å (IPv6): {ipaddress.IPv6Address(random.randint(0, 2**128-1))}")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"MAC –∞–¥—Ä–µ—Å: {mac_address()}")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {random_phone_num_generator()}")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥): {Faker().address()}")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã): {random.randint(0, 90)} –≥—Ä–∞–¥—É—Å–æ–≤ {random.choice(['—Å–µ–≤–µ—Ä–Ω–æ–π —à–∏—Ä–æ—Ç—ã', '—é–∂–Ω–æ–π —à–∏—Ä–æ—Ç—ã'])}, {random.randint(0, 180)} –≥—Ä–∞–¥—É—Å–æ–≤ {random.choice(['–≤–æ—Å—Ç–æ—á–Ω–æ–π –¥–æ–ª–≥–æ—Ç—ã', '–∑–∞–ø–∞–¥–Ω–æ–π –¥–æ–ª–≥–æ—Ç—ã'])}")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"–ù–∞—Å—Ç–æ—è—â–µ–µ –ò–û–§: {RussianNames().get_person()}")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"–ó–∞—Ö–æ–∂—É –≤ –∞–∫–∫–∞—É–Ω—Ç {member.mention} –Ω–∞ YouTube'–µ")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content="–ü—Ä–æ–¥–∞—é –∫–∞–Ω–∞–ª –Ω–∞ –±–∏—Ä–∂–µ")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"–í–∑–ª—ã–º—ã–≤–∞—é –∞–∫–∫–∞—É–Ω—Ç {member.mention} –≤ Discord'–µ")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content="–í—ã—Ö–æ–∂—É —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"–ü–∏—à—É –º–∞–º–µ {member.mention}")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content="–ù–∞–ø–∏—Å–∞–ª")
     await asyncio.sleep(1)
     await interaction.edit_original_response(content=f"~~–¢–æ—á–Ω–æ –Ω–∞—Å—Ç–æ—è—â–∏–π~~ –≤–∑–ª–æ–º –∂–æ–ø—ã {member.mention} –ø—Ä–æ–≤–µ–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ! ‚úÖ")
   except:
     pass

def check_sp(channel_id):
  cur.execute("SELECT channel_id FROM spams WHERE channel_id = %s", (channel_id,))
  return cur.fetchone() != None
              
async def spamt(type, method, channel, webhook, ments=None, duration=None):
  if type == "default":
    if isinstance(channel, discord.TextChannel) or isinstance(channel, discord.VoiceChannel):
      if channel.is_nsfw():
        stexts = stexts_nsfw
      else:
        stexts = stexts_ordinary
    else:
      stexts = stexts_ordinary
  else:
    stexts = [stext.strip() for stext in type.split("|")]
  if isinstance(channel, discord.Thread):
    thread = channel
  else:
    thread = None
  try:
    while check_sp(str(channel.id)):
      if duration:
        if datetime.now(timezone.utc) >= duration:
          cur.execute("DELETE FROM spams WHERE channel_id = %s;", (str(channel.id),))
          con.commit()
          await channel.send("–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! ‚òëÔ∏è")
          lchannel = log_channel(channel.guild.id)
          if lchannel:
            try:
              lchannel = await bot.fetch_channel(lchannel[0])
              embed = discord.Embed(title="–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! ‚òëÔ∏è", color=0x42adf5)
              embed.add_field(name="–ö–∞–Ω–∞–ª —Å–ø–∞–º–∞:", value=f"{channel.mention} (`#{channel.name}`)")
              await lchannel.send(embed=embed)
            except:
              try:
                await channel.guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
              except:
                pass
          break
      text = random.choice(stexts)
      if ments:
        text = ments + "\n" + text
      if method == "webhook":
        if thread:
          await webhook.send(wait=True, content=text, thread=thread)
        else:
          await webhook.send(wait=True, content=text)
      else:
        await channel.send(content=text)
  except discord.errors.NotFound:
    cur.execute("DELETE FROM spams WHERE channel_id = %s;", (str(channel.id),))
    con.commit()
    return
  except discord.errors.HTTPException:
    await asyncio.sleep(3)
  except (discord.errors.DiscordServerError, aiohttp.client_exceptions.ClientOSError, aiohttp.client_exceptions.ServerDisconnectedError) as e:
    cur.execute("DELETE FROM spams WHERE channel_id = %s;", (str(channel.id),))
    con.commit()
    embed = discord.Embed(title=f'‚ö†Ô∏è –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', color=0xfcb603, timestamp=datetime.now(timezone.utc), description=f'–ü—Ä–∏—á–∏–Ω–∞: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Discord')
    await channel.send(embed=embed)
    lchannel = log_channel(channel.guild.id)
    if lchannel:
      try:
        lchannel = await bot.fetch_channel(lchannel[0])
        embed.add_field(name="–ö–∞–Ω–∞–ª —Å–ø–∞–º–∞:", value=f"{channel.mention} (`#{channel.name}`)")
        await lchannel.send(embed=embed)
      except:
        try:
          await channel.guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass
    return

class InvalidDuration(AppCommandError):
  pass

class Duration(Transformer):
  async def transform(self, interaction: Interaction, value: str, /) -> timedelta:
    value = value.replace(" ", "")
    time = 0
    for v, k in time_regex.findall(value.lower()):
      time += time_dict[k]*float(v)
    if time == 0:
      await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!"), ephemeral=True)
      raise InvalidDuration()
    return timedelta(seconds=time)

class CustomSpamModal(discord.ui.Modal, title='–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç'):
    appeal = discord.ui.TextInput(label='–¢–µ–∫—Å—Ç:', placeholder='–í–≤–µ–¥–∏—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤, —Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö —Å–∏–º–≤–æ–ª–æ–º |', required=True, style=discord.TextStyle.long)
    async def on_submit(self, interaction: Interaction):
      await spam_activate(interaction=interaction, type=self.appeal.value, method=self.method, channel=self.channel, duration=self.duration, mention=self.mention)

async def spam_activate(interaction, type, method, channel, duration, mention):
  if method == "webhook":
    try:
      if isinstance(channel, discord.Thread):
        wchannel = channel.parent
      else:
        wchannel = channel
      webhooks = await wchannel.webhooks()
      webhook = [webhook for webhook in webhooks if(webhook.name == "–ö—Ä—É—Ç—è–∫")]
      if webhook:
        webhook = webhook[0]
      else:
        webhook = await wchannel.create_webhook(name="–ö—Ä—É—Ç—è–∫", avatar=await bot.user.avatar.read())
    except:
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ–±—Ö—É–∫–∞–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!"), ephemeral=True)
  else:
    webhook = None
  cur.execute("SELECT channel_id FROM spams WHERE channel_id = %s", (str(channel.id),)) 
  if cur.fetchone():
    await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", description="–°–ø–∞–º —É–∂–µ –≤–∫–ª—é—á—ë–Ω –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!", color=0xff0000), ephemeral=True)
  else:
    await interaction.response.defer()
    if duration:
      duration_timedelta = duration
      duration = datetime.now(timezone.utc) + duration
      await interaction.followup.send(f'–°–ø–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {verbose_timedelta(duration_timedelta)} (<t:{int(duration.timestamp())}:D>)! ‚òëÔ∏è')
    else:
      await interaction.followup.send('–°–ø–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ‚òëÔ∏è')
    if not channel == interaction.channel:
      if duration:
        await channel.send(f'–°–ø–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ {interaction.user.mention} –Ω–∞ {verbose_timedelta(duration_timedelta)} (<t:{int(duration.timestamp())}:D>)! ‚òëÔ∏è')
      else:
        await channel.send(f'–°–ø–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ {interaction.user.mention}! ‚òëÔ∏è')
    if duration:
      cur.execute("INSERT INTO spams (type, method, channel_id, ments, timestamp) VALUES(%s, %s, %s, %s, %s);", (type, method, channel.id, mention, f"{int(duration.timestamp())}"))
    else:
      cur.execute("INSERT INTO spams (type, method, channel_id, ments, timestamp) VALUES(%s, %s, %s, %s, %s);", (type, method, channel.id, mention, duration))
    con.commit()
    task = asyncio.create_task(spamt(type, method, channel, webhook, mention, duration))
    task.name = "–°–ø–∞–º"
    task.channel_id = channel.id
    lchannel = log_channel(interaction.guild.id)
    if lchannel:
      try:
        lchannel = await bot.fetch_channel(lchannel[0])
        embed = discord.Embed(title="–°–ø–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ‚òëÔ∏è", color=0x42adf5).add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{interaction.user} ({interaction.user.mention})")
        if channel != interaction.channel:
          embed.add_field(name="–ö–∞–Ω–∞–ª —Å–ø–∞–º–∞:", value=f"{channel.mention} (`#{channel.name}`)")
          embed.add_field(name="–ö–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥—ã:", value=f"{interaction.channel.mention} (`#{interaction.channel.name}`)")
        else:
          embed.add_field(name="–ö–∞–Ω–∞–ª —Å–ø–∞–º–∞ –∏ –∫–æ–º–∞–Ω–¥—ã:", value=f"{channel.mention} (`#{channel.name}`)")
        if duration:
          embed.add_field(name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", value=f"{verbose_timedelta(duration_timedelta)} (<t:{int(duration.timestamp())}:D>)")
        await lchannel.send(embed=embed)
      except:
        try:
          await interaction.guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass 

spam_group = app_commands.Group(name="—Å–ø–∞–º", description="–°–ø–∞–º –≤ –∫–∞–Ω–∞–ª–µ", guild_only=True, default_permissions=discord.Permissions(mention_everyone=True, moderate_members=True))

@spam_group.command(name="–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", description="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∞–º –≤ –∫–∞–Ω–∞–ª–µ")
@app_commands.describe(channel='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–ø–∞–º–∞')
async def spam_stop_command(interaction: Interaction, channel: typing.Union[discord.TextChannel, discord.Thread, discord.VoiceChannel]=None):
  if not channel:
    channel = interaction.channel
  cur.execute("SELECT channel_id FROM spams WHERE channel_id = %s", (str(channel.id),)) 
  if cur.fetchone():
    await interaction.response.defer()
    cur.execute("DELETE FROM spams WHERE channel_id = %s;", (str(channel.id),))
    con.commit()
    await interaction.followup.send('–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚òëÔ∏è')
    if not channel == interaction.channel:
      await channel.send(f'–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ {interaction.user.mention}! ‚òëÔ∏è')
    lchannel = log_channel(interaction.guild.id)
    if lchannel:
      try:
        lchannel = await bot.fetch_channel(lchannel[0])
        embed = discord.Embed(title="–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚òëÔ∏è", color=0x42adf5).add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{interaction.user} ({interaction.user.mention})")
        if channel != interaction.channel:
          embed.add_field(name="–ö–∞–Ω–∞–ª —Å–ø–∞–º–∞:", value=f"{channel.mention} (`#{channel.name}`)")
          embed.add_field(name="–ö–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥—ã:", value=f"{interaction.channel.mention} (`#{interaction.channel.name}`)")
        else:
          embed.add_field(name="–ö–∞–Ω–∞–ª —Å–ø–∞–º–∞ –∏ –∫–æ–º–∞–Ω–¥—ã:", value=f"{channel.mention} (`#{channel.name}`)")
        await lchannel.send(embed=embed)
      except:
        try:
          await interaction.guild.owner.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!"))
        except:
          pass
  else:
    await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", description="–°–ø–∞–º –Ω–µ –≤–∫–ª—é—á—ë–Ω –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!", color=0xff0000), ephemeral=True)

@spam_group.command(name="–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", description="–ù–∞—á–∏–Ω–∞–µ—Ç —Å–ø–∞–º –≤ –∫–∞–Ω–∞–ª–µ")
@app_commands.choices(type=[Choice(name="–°–ø–∞–º —Ç–µ–∫—Å—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", value="default"), Choice(name="–°–ø–∞–º –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º", value="custom")], method=[Choice(name="–°–ø–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞", value="bot"), Choice(name="–°–ø–∞–º —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫", value="webhook")])
@app_commands.describe(type="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–∞–º–∞", method="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Å–ø–∞–º–∞", channel='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–ø–∞–º–∞', duration='–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞', mention_1='–£–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å/—É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–∏–Ω–≥–æ–≤–∞—Ç—å—Å—è', mention_2='–£–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å/—É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–∏–Ω–≥–æ–≤–∞—Ç—å—Å—è', mention_3='–£–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å/—É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–∏–Ω–≥–æ–≤–∞—Ç—å—Å—è', mention_4='–£–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å/—É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–∏–Ω–≥–æ–≤–∞—Ç—å—Å—è', mention_5='–£–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å/—É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–∏–Ω–≥–æ–≤–∞—Ç—å—Å—è')
async def spam_activate_command(interaction: Interaction, type: str, method: str, channel: typing.Union[discord.TextChannel, discord.Thread, discord.VoiceChannel]=None, duration: Transform[str, Duration]="", mention_1: typing.Union[discord.Role, User]=None, mention_2: typing.Union[discord.Role, User]=None, mention_3: typing.Union[discord.Role, User]=None, mention_4: typing.Union[discord.Role, User]=None, mention_5: typing.Union[discord.Role, User]=None):
  if not channel:
    channel = interaction.channel
  if duration:
    if duration > timedelta(days=365) or duration < timedelta(seconds=3):
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –±–æ–ª—å—à–µ, —á–µ–º 1 –≥–æ–¥, –ª–∏–±–æ –º–µ–Ω—å—à–µ, —á–µ–º 3 —Å–µ–∫—É–Ω–¥—ã!"), ephemeral=True)
  if not isinstance(channel, typing.Union[discord.TextChannel, discord.Thread, discord.VoiceChannel]):
    return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º, –≤–µ—Ç–∫–∞–º –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º!"), ephemeral=True)
  mention = []
  if mention_1:
    mention.append(mention_1)
  if mention_2:
    mention.append(mention_2)
  if mention_3:
    mention.append(mention_3)
  if mention_4:
    mention.append(mention_4)
  if mention_5:
    mention.append(mention_5)
  mention = [u.mention if u != interaction.guild.default_role else "@everyone" for u in mention]
  if mention:
    if bot.user.mention in mention:
      mention.remove(bot.user.mention)
    mention = " ".join(list(set(mention)))
  else:
    mention = ""
  if type == "custom":
    customspammodal = CustomSpamModal()
    customspammodal.method = method
    customspammodal.channel = channel
    customspammodal.duration = duration
    customspammodal.mention = mention
    await interaction.response.send_modal(customspammodal)
    return
  await spam_activate(interaction=interaction, type=type, method=method, channel=channel, duration=duration, mention=mention)

@bot.command(aliases=['—Å–µ—Ä–≤–µ—Ä–∞'])
@commands.is_owner()
async def guilds(ctx):
  guilds = ""
  for guild in bot.guilds:
    guilds += f"\n{guild.name} (ID: {guild.id}) ‚Äî {len(guild.members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
  with open("guilds.txt", "w+", encoding="utf-8") as gs:
    gs.write(f"–°–µ—Ä–≤–µ—Ä–∞:{guilds}")
  await ctx.reply(file=discord.File("guilds.txt"))

@bot.tree.command(name="–≥–µ–Ω—Å–æ–æ–±—â–µ–Ω–∏–π", description="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –±—Ä–µ–¥–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞")
@app_commands.guild_only
@app_commands.default_permissions(manage_guild=True)
@app_commands.describe(channel='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤', reply_chance='–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ % (–±–µ–∑ %)')
async def set_channel(interaction: Interaction, channel: typing.Union[discord.TextChannel, discord.ForumChannel, discord.Thread, discord.VoiceChannel]=None, reply_chance: float=None):
  if not channel:
    channel = interaction.channel
  if channel.is_nsfw():
    return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å NSFW –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞!"), ephemeral=True)
  cur.execute("SELECT channel_id FROM channels_reply WHERE channel_id = %s", (str(channel.id),))
  if cur.fetchone():
    cur.execute("DELETE FROM channels_reply WHERE channel_id = %s;", (str(channel.id),))
    con.commit()
    await interaction.response.send_message(embed=discord.Embed(description=f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}! ‚òëÔ∏è", color=0x43ccfa))
  else:
    chperms = channel.permissions_for(interaction.guild.me)
    if not (chperms.read_messages and chperms.send_messages and chperms.read_message_history):
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏/–∏–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª –∏/–∏–ª–∏ —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"), ephemeral=True)
    if not reply_chance:
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í–≤–µ–¥–∏—Ç–µ `reply_chance` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞!"), ephemeral=True)
    if reply_chance < 0.01 or reply_chance > 100.0:
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.01 –¥–æ 100!"), ephemeral=True)
    cur.execute("INSERT INTO channels_reply (channel_id, reply_chance) VALUES (%s, %s);", (channel.id, reply_chance/100))
    con.commit()
    await interaction.response.send_message(embed=discord.Embed(description=f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}! ‚òëÔ∏è", color=0x43ccfa))

@bot.tree.command(name="–ª–∞–π–∫–∏", description="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è —à–∫–∞–ª—ã –ª–∞–π–∫–æ–≤")
@app_commands.guild_only
@app_commands.default_permissions(manage_guild=True)
@app_commands.describe(channel='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —à–∫–∞–ª—ã –ª–∞–π–∫–æ–≤')
async def set_likes_channel(interaction: Interaction, channel: typing.Union[discord.TextChannel, discord.Thread, discord.VoiceChannel, discord.ForumChannel]=None):
  if not channel:
    channel = interaction.channel
  cur.execute("SELECT channel_id FROM channels_likes WHERE channel_id = %s", (str(channel.id),))
  if cur.fetchone():
    cur.execute("DELETE FROM channels_likes WHERE channel_id = %s;", (str(channel.id),))
    con.commit()
    await interaction.response.send_message(embed=discord.Embed(description=f"–®–∫–∞–ª–∞ –ª–∞–π–∫–æ–≤ —É–±—Ä–∞–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel.mention}! ‚òëÔ∏è", color=0x43ccfa))
  else:
    chperms = channel.permissions_for(interaction.guild.me)
    if not (chperms.read_messages and chperms.add_reactions and chperms.read_message_history):
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ –∏/–∏–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª –∏/–∏–ª–∏ —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"), ephemeral=True)
    cur.execute("INSERT INTO channels_likes (channel_id) VALUES (%s);", (channel.id,))
    con.commit()
    if isinstance(channel, discord.ForumChannel):
      await interaction.response.send_message(embed=discord.Embed(description=f"–®–∫–∞–ª–∞ –ª–∞–π–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª {channel.mention}! ‚òëÔ∏è\n–¢–µ–ø–µ—Ä—å –ø–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ —Ñ–æ—Ä—É–º–∞ –±—É–¥—É—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è —Ä–µ–∞–∫—Ü–∏–∏ üëç –∏ üëé.", color=0x43ccfa))
    else:
      await interaction.response.send_message(embed=discord.Embed(description=f"–®–∫–∞–ª–∞ –ª–∞–π–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª {channel.mention}! ‚òëÔ∏è\n–¢–µ–ø–µ—Ä—å –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–∞ –±—É–¥—É—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è —Ä–µ–∞–∫—Ü–∏–∏ üëç –∏ üëé.", color=0x43ccfa))

@bot.tree.command(name='–¥–æ–Ω', description='–ë–æ—Ç —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –†–∞–º–∑–∞–Ω–æ–º –ö–∞–¥—ã—Ä–æ–≤—ã–º')
@app_commands.guild_only
async def don(interaction: Interaction):
  await interaction.response.send_message(random.choice(['–ß–µ—á–Ω—è –≥–æ—Ä–¥–∏—Ü–∞ –≤–∞–º–∏ –¥–æ–Ω!\n–†–∞–∑–º–∞–Ω –∫–∞—Ç—ã—Ä–∞–≤ –ø—Ä–µ–¥–∞—Å—Ç–∞–≤–º—Ü –≤–∞–º 2 –∞–≤—Ü–∞ –∂—ã–Ω–∞ –¥–æ–Ω!\n–ü—Ä–∞–¥–∞–ª–∂–∞–π—Ç–µ —Ä–∞–¥–æ–≤–∞—Ç—å —á–µ—á–Ω—è!', '–ß–µ—á–Ω—è –Ω–µ –≥–æ—Ä–¥–∏—Ü–∞ –≤–∞–º–∏ –¥–æ–Ω!\n–†–∞–∑–º–∞–Ω –∫–∞—Ç—ã—Ä–∞–≤ –∞—Ç–∞–±—Ä–æ–ª —É –≤–æ—Å 2 –∞–≤—Ü–∞ –∂—ã–Ω–∞ –¥–æ–Ω!']))

def insert_returns(body):
    if isinstance(body[-1], ast.Expr):
        body[-1] = ast.Return(body[-1].value)
        ast.fix_missing_locations(body[-1])

    if isinstance(body[-1], ast.If):
        insert_returns(body[-1].body)
        insert_returns(body[-1].orelse)

    if isinstance(body[-1], ast.With):
        insert_returns(body[-1].body)

@bot.command(name="run", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", guild=discord.Object(id=guild_id))
@commands.is_owner()
async def run(ctx, *, cmd: str):
    fn_name = "_eval_expr"
    cmd = cmd.strip("` ")
    cmd = "\n".join(f"    {i}" for i in cmd.splitlines())
    body = f"async def {fn_name}():\n{cmd}"
    parsed = ast.parse(body)
    body = parsed.body[0].body
    insert_returns(body)
    env = {
        'bot': bot,
        'discord': discord,
        'commands': commands,
        'ctx': ctx,
        '__import__': __import__
    }
    exec(compile(parsed, filename="<ast>", mode="exec"), env)
    await eval(f"{fn_name}()", env)
    await ctx.reply(content="‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

@run.error
async def run_error(ctx, error):
  await ctx.reply(embed=discord.Embed(title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", color=0xff0000, description=f"```py\n{error}```"))

@bot.command()
@commands.is_owner()
async def sync(ctx: commands.Context, guild_id: int=None):
  if guild_id:
    await bot.tree.sync(guild=discord.Object(id=guild_id))
  else:
    await bot.tree.sync(guild=None)
  await ctx.send("‚òëÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")

def db_remove(channel):
  cur.execute("DELETE FROM spams WHERE channel_id = %s;", (str(channel.id),))
  cur.execute("DELETE FROM giveaways WHERE channel_id = %s;", (str(channel.id),))
  con.commit()

@bot.event
async def on_guild_remove(guild: Guild):
  async with aiohttp.ClientSession() as session:
    webhook = discord.Webhook.from_url(os.environ['WEBHOOK_URL'], session=session)
    cur.execute("DELETE FROM giveaways WHERE guild_id = %s;", (str(guild.id),))
    con.commit()
    [db_remove(channel) for channel in guild.channels]
    embed = discord.Embed(title="–ë–æ—Ç –±—ã–ª –∫–∏–∫–Ω—É—Ç/–∑–∞–±–∞–Ω–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞", description=f"–î–∞–Ω–Ω—ã–µ –æ –Ω—ë–º –±—ã–ª–∏ —Å—Ç—ë—Ä—Ç—ã\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {guild.member_count}\nID —Å–µ—Ä–≤–µ—Ä–∞: {guild.id}", color=0x9f0000, timestamp=datetime.now(timezone.utc))
    if guild.icon:
      embed.set_footer(icon_url=guild.icon.url, text=guild.name)
    else:
      embed.set_footer(text=guild.name)
    await webhook.send(embed=embed)

@bot.event
async def on_guild_channel_delete(channel: discord.abc.GuildChannel):
  guild = channel.guild
  lchannel = log_channel(guild.id)
  db_remove(channel)
  cur.execute("DELETE FROM channels_reply WHERE channel_id = %s;", (str(channel.id),))
  cur.execute("DELETE FROM logs WHERE channel_id = %s;", (str(channel.id),))
  con.commit()
  if lchannel:
    try:
      lchannel = await bot.fetch_channel(lchannel[0])
      embed = discord.Embed(color=0xf52c3f, description=f"–£–¥–∞–ª—ë–Ω –∫–∞–Ω–∞–ª: `#{channel}`", timestamp=datetime.now(timezone.utc))
      embed.set_footer(text=f"ID: {channel.id}")
      try:
        async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_delete):
          if entry.target.id == channel.id:
            embed.add_field(name="–°–¥–µ–ª–∞–ª —ç—Ç–æ:", value=f"{entry.user} ({entry.user.mention})")
      except:
        pass
      await lchannel.send(embed=embed)
    except:
      pass

@bot.event
async def on_guild_join(guild: Guild):
  uspeh = False
  for channel in guild.text_channels:
    if uspeh:
      break
    try:
      await channel.send(embed=discord.Embed(color=0x42f593, title="–ü—Ä–∏–≤–µ—Ç! üëã", description=f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä!\n–Ø ‚Äî –∫—Ä—É—Ç–æ–π –±–æ—Ç —Å –∫—É—á–µ–π —Ñ—É–Ω–∫—Ü–∏–π! –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö ‚Äî </—Ö–µ–ª–ø:1136698980584136804>\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à [Discord —Å–µ—Ä–≤–µ—Ä]({discord_url})!\n–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"))
      uspeh = True
    except:
      pass
  async with aiohttp.ClientSession() as session:
    webhook = discord.Webhook.from_url(os.environ['WEBHOOK_URL'], session=session)
    embed = discord.Embed(title="–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä", color=0x9aff35, description = f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {guild.member_count}\nID —Å–µ—Ä–≤–µ—Ä–∞: {guild.id}")
    user = None
    try:
      async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.bot_add):
        user = entry.user
    except:
      pass
    if user:
      embed.description = f"–î–æ–±–∞–≤–∏–ª: {user.mention} ({user}) —Å ID: {user.id}\n" + embed.description
    if guild.icon:
      embed.set_footer(icon_url=guild.icon.url, text=guild.name)
    else:
      embed.set_footer(text=guild.name)
    await webhook.send(embed=embed)

@bot.tree.command(name='–±–∞–Ω–Ω–µ—Ä', description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞')
@app_commands.describe(member='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
async def banner_cmd(interaction: Interaction, member: typing.Union[Member, User]=None):
  if not member:
    member = interaction.user
  user = await bot.fetch_user(member.id)
  if not user.banner:
    return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –±–∞–Ω–Ω–µ—Ä–∞!"), ephemeral=True)
  await interaction.response.defer()
  user_banner = await user.banner.to_file()
  await interaction.followup.send(embed=discord.Embed(title=f"–ë–∞–Ω–Ω–µ—Ä {user}", color=member.color).set_image(url=f"attachment://{user_banner.filename}").set_footer(text="–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –±–∞–Ω–Ω–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –∞ —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –±–∞–Ω–Ω–µ—Ä, —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Discord"), file=user_banner)

@bot.tree.command(name='–∞–≤–∞—Ç–∞—Ä', description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞')
@app_commands.describe(member='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
async def avatar_cmd(interaction: Interaction, member: typing.Union[Member, User]=None):
  await interaction.response.defer()
  if not member:
    member = interaction.user
  embeds = []
  avatars = []
  user = await bot.fetch_user(member.id)
  try:
    user_avatar = await user.display_avatar.to_file()
  except:
    user_avatar = await user.display_avatar.to_file(use_cached=True)
  embeds.append(discord.Embed(title=f"–ê–≤–∞—Ç–∞—Ä {user}", color=member.color, url=f"https://discord.com/users/{member.id}").set_image(url=f"attachment://{user_avatar.filename}"))
  avatars.append(user_avatar)
  if isinstance(member, Member):
    if member.guild_avatar:
      try:
        guild_avatar = await member.display_avatar.to_file()
      except:
        guild_avatar = await member.display_avatar.to_file(use_cached=True)
      embeds.append(discord.Embed(title=f"–ê–≤–∞—Ç–∞—Ä {user} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", color=member.color, url=f"https://discord.com/users/{member.id}").set_image(url=f"attachment://{guild_avatar.filename}"))
      avatars.append(guild_avatar)
  await interaction.followup.send(embeds=embeds, files=avatars)

class info_view(discord.ui.View):
  def __init__(self):
    super().__init__()
    self.add_item(discord.ui.Button(style=discord.ButtonStyle.url, url=bot_invite_url, emoji='üîó', label='–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞!'))
    self.add_item(discord.ui.Button(style=discord.ButtonStyle.url, url=discord_url, emoji='üõ†Ô∏è', label='Discord —Å–µ—Ä–≤–µ—Ä'))

def userss():
  cif = str(len(bot.users))
  if cif[len(cif)-1] == '1' and cif[len(cif) - 2] + cif[len(cif) - 1] != '11':
     return f"{cif} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
  elif cif[len(cif)-1] in ['2', '3', '4'] and cif[len(cif) - 2] + cif[len(cif) - 1] not in ['12', '13', '14']:
     return f"{cif} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  else:
     return f"{cif} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

def frazess():
  cur.execute("SELECT count(*) FROM markov_chain;")
  cif = str(cur.fetchone()[0])
  if cif[len(cif)-1] == '1' and cif[len(cif) - 2] + cif[len(cif) - 1] != '11':
     return f"{cif} —Ñ—Ä–∞–∑–∞"
  elif cif[len(cif)-1] in ['2', '3', '4'] and cif[len(cif) - 2] + cif[len(cif) - 1] not in ['12', '13', '14']:
     return f"{cif} —Ñ—Ä–∞–∑—ã"
  else:
     return f"{cif} —Ñ—Ä–∞–∑"

@bot.tree.command(name='–∏–Ω—Ñ–æ', description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ')
@app_commands.guild_only
async def info_cmd(interaction: Interaction):
  embed = discord.Embed(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", color=0x4287f5, description=f"Shard {interaction.guild.shard_id + 1} / {bot.shard_count}")
  embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value=f"<@{owner_id}>", inline=True)
  embed.add_field(name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", value=f"{serverss()}\n{userss()}\n{frazess()}", inline=True)
  embed.add_field(name="–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", value=f"–û–°: [Linux](https://www.linux.org/)\n–•–æ—Å—Ç–∏–Ω–≥: [Railway](https://railway.app/)\n–í–µ—Ä—Å–∏—è [Python](https://www.python.org/): {platform.python_version()}\n–í–µ—Ä—Å–∏—è [discord.py](https://discordpy.readthedocs.io/en/stable/intro.html#installing): {discord.__version__}", inline=True)
  embed.add_field(name="–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è", value="*–ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ–¥—ë—Ç—Å—è –æ—Ç –∏–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞*\n–£–≤–∏–¥–µ–ª —è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Failure Project –±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–º–±–µ–¥–æ–≤, –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–ª —Ç–∞–∫–æ–≥–æ –∂–µ –∏ –æ—Å–≤–∞–∏–≤–∞–ª –ø–∏—Ç–æ–Ω, –∑–∞—Ç–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –±–æ—Ç –≥–æ–≤–Ω–æ –Ω–µ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏ —É–¥–∞–ª–∏–ª –µ–≥–æ, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–ª —ç—Ç–æ–≥–æ. –ü–æ—Ç–æ–º —è —É–¥–∞–ª–∏–ª –ö—Ä—É—Ç—è–∫–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–ª –µ–≥–æ, –∏–±–æ –±–æ—Ç –Ω–µ –±—ã–ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ —à–∏—Ä–æ–∫–∏–µ –º–∞—Å—Å—ã", inline=False)
  embed.add_field(name="–°—Å—ã–ª–∫–∏", value="[–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/document/d/1dcsigKBWaju9-3L2VVOt7-zltu9-tNFE_dkaAcE8P7w)\n[–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](https://docs.google.com/document/d/1qJAtNv4Skl5rh5epdahXzCeaDU5kwRwbg3CYqsU-esw)")
  await interaction.response.send_message(embed=embed, view=info_view())

@bot.tree.command(name='–ª–æ–≥–∏', description='–í–∫–ª—é—á–∞–µ—Ç/–í—ã–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
@app_commands.guild_only
@app_commands.default_permissions(manage_guild=True)
@app_commands.describe(channel='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤')
async def logs_cmd(interaction: Interaction, channel: discord.TextChannel=None):
  if not channel:
    channel = interaction.channel
  if log_channel(interaction.guild.id):
    cur.execute("DELETE FROM logs WHERE guild_id = %s;", (str(interaction.guild.id),))
    con.commit()
    return await interaction.response.send_message(embed=discord.Embed(color=0x0ffc03, title="‚úÖ –£—Å–ø–µ—à–Ω–æ!", description="–õ–æ–≥–∏ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!"))
  else:
    chperms = channel.permissions_for(interaction.guild.me)
    if not (chperms.read_messages and chperms.send_messages and chperms.read_message_history):
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏/–∏–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª –∏/–∏–ª–∏ —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"), ephemeral=True)
    cur.execute("INSERT INTO logs (guild_id, channel_id) VALUES(%s, %s);", (interaction.guild.id, channel.id))
    con.commit()
    return await interaction.response.send_message(embed=discord.Embed(color=0x0ffc03, title="‚úÖ –£—Å–ø–µ—à–Ω–æ!", description=f"–õ–æ–≥–∏ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤ {channel.mention}"))

@bot.tree.command(name='–∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è', description='–í–∫–ª—é—á–∞–µ—Ç/–í—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
@app_commands.guild_only
@app_commands.default_permissions(manage_guild=True)
async def autopub_cmd(interaction: Interaction):
  if is_autopub(interaction.guild.id):
    cur.execute("DELETE FROM autopub WHERE guild_id = %s;", (str(interaction.guild.id),))
    con.commit()
    return await interaction.response.send_message(embed=discord.Embed(color=0x0ffc03, title="‚úÖ –£—Å–ø–µ—à–Ω–æ!", description="–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!"))
  else:
    news_channels = [channel for channel in interaction.guild.text_channels if channel.is_news()]
    if not news_channels:
      return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!"), ephemeral=True)
    for channel in news_channels:
      chperms = channel.permissions_for(interaction.guild.me)
      if not (chperms.read_messages and chperms.send_messages and chperms.manage_messages and chperms.read_message_history):
        return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–∞–º –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ –∏ —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"), ephemeral=True)
    cur.execute("INSERT INTO autopub (guild_id) VALUES(%s);", (interaction.guild.id,))
    con.commit()
    return await interaction.response.send_message(embed=discord.Embed(color=0x0ffc03, title="‚úÖ –£—Å–ø–µ—à–Ω–æ!", description=f"–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞!"))

@bot.tree.command(name='–±—É—Å—Ç—ã', description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –±—É—Å—Ç—ã')
@app_commands.guild_only
async def boosts_command(interaction: Interaction):
  guild = interaction.guild
  if guild.premium_subscription_count == 0:
    return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –±—É—Å—Ç–æ–≤!", color=0xff0000), ephemeral=True)
  boosters = guild.premium_subscribers
  boosters_str = ""
  for booster in boosters:
    boosters_str += f"\n{booster} ({booster.mention}) ‚Äî –ë—É—Å—Ç–∏—Ç —Å <t:{int(booster.premium_since.timestamp())}>"
  if boosters:
    return await interaction.response.send_message(embed=discord.Embed(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±—É—Å—Ç—ã", color=0xf569fa, description=f"–£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–µ—Ä–∞: {guild.premium_tier}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Å—Ç–µ—Ä–æ–≤: {len(boosters)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Å—Ç–æ–≤: {guild.premium_subscription_count}\n–†–æ–ª—å –¥–ª—è –±—É—Å—Ç–µ—Ä–æ–≤: {guild.premium_subscriber_role.mention}\n–ë—É—Å—Ç–µ—Ä—ã:{boosters_str}"))
  else:
    return await interaction.response.send_message(embed=discord.Embed(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±—É—Å—Ç—ã", color=0xf569fa, description=f"–£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–µ—Ä–∞: {guild.premium_tier}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Å—Ç–µ—Ä–æ–≤: {len(boosters)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Å—Ç–æ–≤: {guild.premium_subscription_count}\n–†–æ–ª—å –¥–ª—è –±—É—Å—Ç–µ—Ä–æ–≤: {guild.premium_subscriber_role.mention}"))

class knb_bot(discord.ui.Select):
    def __init__(self):
      super().__init__(placeholder='–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç', min_values=1, max_values=1, options=[discord.SelectOption(label='–ö–∞–º–µ–Ω—å', description='–í—ã–±—Ä–∞—Ç—å –∫–∞–º–µ–Ω—å', emoji='‚úä'), discord.SelectOption(label='–ù–æ–∂–Ω–∏—Ü—ã', description='–í—ã–±—Ä–∞—Ç—å –Ω–æ–∂–Ω–∏—Ü—ã', emoji='‚úåÔ∏è'), discord.SelectOption(label='–ë—É–º–∞–≥–∞', description='–í—ã–±—Ä–∞—Ç—å –±—É–º–∞–≥—É', emoji='‚úã')])

    async def callback(self, interaction: Interaction):
      if self.view.author == interaction.user:
        uvy = self.values[0]
        bvy = random.choice(["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"])
        if bvy == "–ö–∞–º–µ–Ω—å":
          if uvy == "–ù–æ–∂–Ω–∏—Ü—ã":
            pobeda = True
          elif uvy == "–ë—É–º–∞–≥–∞":
            pobeda = False
          else:
            pobeda = None
        elif bvy == "–ù–æ–∂–Ω–∏—Ü—ã":
          if uvy == "–ù–æ–∂–Ω–∏—Ü—ã":
            pobeda = None
          elif uvy == "–ë—É–º–∞–≥–∞":
            pobeda = True
          else:
            pobeda = False
        else:
          if uvy == "–ù–æ–∂–Ω–∏—Ü—ã":
            pobeda = False
          elif uvy == "–ë—É–º–∞–≥–∞":
            pobeda = None
          else:
            pobeda = True
        if pobeda == True:
          await interaction.response.edit_message(embed=discord.Embed(title="–ö–ù–ë", description=f"–í–∞—à –≤—ã–±–æ—Ä: `{uvy}`\n–ú–æ–π –≤—ã–±–æ—Ä: `{bvy}`\n–Ø –ø–æ–±–µ–¥–∏–ª! –•–∏—Ö–∏—Ö–∏—Ö–∞ <:hihihiha:1006949852845965435>", color=self.view.message.embeds[0].color), view=None)
        elif pobeda == False:
          await interaction.response.edit_message(embed=discord.Embed(title="–ö–ù–ë", description=f"–í–∞—à –≤—ã–±–æ—Ä: `{uvy}`\n–ú–æ–π –≤—ã–±–æ—Ä: `{bvy}`\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏! –Ø –ø–ª–∞–∫–∞—é üò≠", color=self.view.message.embeds[0].color), view=None)
        else:
          await interaction.response.edit_message(embed=discord.Embed(title="–ö–ù–ë", description=f"–í–∞—à –≤—ã–±–æ—Ä: `{uvy}`\n–ú–æ–π –≤—ã–±–æ—Ä: `{bvy}`\n–ù–∏—á—å—è!", color=self.view.message.embeds[0].color), view=None)
      else:
        return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É!", color=0xff0000), ephemeral=True)

class knb_bot_view(discord.ui.View):
  async def on_timeout(self) -> None:
    try:
      message = await self.message.channel.fetch_message(self.message.id)
      if not message.embeds[0].title == "–ö–ù–ë –≤—ã–±–æ—Ä":
        return
      for item in self.children:
        item.disabled = True
      await message.edit(view=self, embed=discord.Embed(title="–ö–ù–ë –≤—ã–±–æ—Ä", description="–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏–ª–∏...", color=0x747880))
    except:
      return

  def __init__(self, timeout):
    super().__init__()
    self.add_item(knb_bot())

class knb_user(discord.ui.Select):
    def __init__(self):
      super().__init__(placeholder='–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç', min_values=1, max_values=1, options=[discord.SelectOption(label='–ö–∞–º–µ–Ω—å', description='–í—ã–±—Ä–∞—Ç—å –∫–∞–º–µ–Ω—å', emoji='‚úä'), discord.SelectOption(label='–ù–æ–∂–Ω–∏—Ü—ã', description='–í—ã–±—Ä–∞—Ç—å –Ω–æ–∂–Ω–∏—Ü—ã', emoji='‚úåÔ∏è'), discord.SelectOption(label='–ë—É–º–∞–≥–∞', description='–í—ã–±—Ä–∞—Ç—å –±—É–º–∞–≥—É', emoji='‚úã')])

    async def callback(self, interaction: Interaction):
      selected1 = None
      user1 = self.view.user1
      user2 = self.view.user2
      if interaction.user.id not in [user1.id, user2.id]:
        return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!", color=0xff0000), ephemeral=True)
      try:
        selected1 = self.view.selected1
      except:
        pass
      if (interaction.user.id == user2.id and selected1 == None) or (interaction.user.id == user1.id and selected1):
        return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", color=0xff0000), ephemeral=True)
      if not selected1:
        self.view.selected1 = self.values[0]
        await interaction.response.edit_message(embed=discord.Embed(title="–ö–ù–ë –≤—ã–±–æ—Ä", description=f"{user1.mention} —Å–æ–≤–µ—Ä—à–∏–ª —Ö–æ–¥\n{user2.mention} –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!", color=self.view.message.embeds[0].color), view=self.view)
      else:
        selected2 = self.values[0]
        if selected1 == "–ö–∞–º–µ–Ω—å":
          if selected2 == "–ù–æ–∂–Ω–∏—Ü—ã":
            pobeda = user1
          elif selected2 == "–ë—É–º–∞–≥–∞":
            pobeda = user2
          else:
            pobeda = None
        elif selected1 == "–ù–æ–∂–Ω–∏—Ü—ã":
          if selected2 == "–ù–æ–∂–Ω–∏—Ü—ã":
            pobeda = None
          elif selected2 == "–ë—É–º–∞–≥–∞":
            pobeda = user1
          else:
            pobeda = user2
        else:
          if selected2 == "–ù–æ–∂–Ω–∏—Ü—ã":
            pobeda = user2
          elif selected2 == "–ë—É–º–∞–≥–∞":
            pobeda = None
          else:
            pobeda = user1
        if not pobeda:
          await interaction.response.edit_message(embed=discord.Embed(title="–ö–ù–ë", description=f"–í—ã–±–æ—Ä {user1.mention}: `{selected1}`\n–í—ã–±–æ—Ä {user2.mention}: `{selected2}`\n–ù–∏—á—å—è!", color=self.view.message.embeds[0].color), view=None)
        else:
          await interaction.response.edit_message(embed=discord.Embed(title="–ö–ù–ë", description=f"–í—ã–±–æ—Ä {user1.mention}: `{selected1}`\n–í—ã–±–æ—Ä {user2.mention}: `{selected2}`\n–ü–æ–±–µ–¥–∏–ª: {pobeda.mention}", color=self.view.message.embeds[0].color), view=None)

class knb_user_view(discord.ui.View):
  async def on_timeout(self) -> None:
    try:
      message = await self.message.channel.fetch_message(self.message.id)
      if not message.embeds[0].title == "–ö–ù–ë –≤—ã–±–æ—Ä":
        return
      for item in self.children:
        item.disabled = True
      await message.edit(view=self, embed=discord.Embed(title="–ö–ù–ë –≤—ã–±–æ—Ä", description="–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏–ª–∏...", color=0x747880))
    except:
      return

  def __init__(self, timeout):
    super().__init__()
    self.add_item(knb_user())

@bot.tree.command(name='–∫–Ω–±', description='–°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞?')
@app_commands.guild_only
@app_commands.describe(member='–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–µ–º –∏–≥—Ä–∞—Ç—å')
async def knb(interaction: Interaction, member: Member=None):
  if not member:
    view = knb_bot_view(timeout=300)
    view.author = interaction.user
    await interaction.response.send_message(embed=discord.Embed(title="–ö–ù–ë –≤—ã–±–æ—Ä", description="–•–æ—Ä–æ—à–æ, –≤—ã –ø—Ä–µ–¥–ø–æ—á–ª–∏ –∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É", color=discord.Color.random()), view=view)
    view.message = await interaction.original_response()
  else:
    if member.bot:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –∞ –Ω–µ –±–æ—Ç–∞!", color=0xff0000), ephemeral=True)
    if member == interaction.user:
      return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!", color=0xff0000), ephemeral=True)
    view = knb_user_view(timeout=300)
    ralis = [interaction.user, member]
    view.user1 = random.choice(ralis)
    ralis.remove(view.user1)
    view.user2 = ralis[0]
    await interaction.response.send_message(content=" ".join([mem.mention for mem in [interaction.user, member]]), embed=discord.Embed(title="–ö–ù–ë –≤—ã–±–æ—Ä", description=f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!\n–•–æ–¥ –∑–∞ {view.user1.mention}", color=discord.Color.random()), view=view)
    view.message = await interaction.original_response()

@bot.tree.command(name="—é–∑–µ—Ä–∏–Ω—Ñ–æ", description="–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ")
@app_commands.describe(member="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
async def userinfo(interaction: Interaction, member: typing.Union[Member, User]=None):
  if not member:
    member = interaction.user
  ring = [f"–¢—ç–≥: {member}", f"–°–æ–∑–¥–∞–ª –∞–∫–∫–∞—É–Ω—Ç: <t:{int(member.created_at.timestamp())}:R>"]
  if member.global_name:
    ring.append(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: {member.global_name}")
  if isinstance(member, Member):
    ring.append(f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: <t:{int(member.joined_at.timestamp())}:R>")
    if member.nick:
      ring.insert(1, f"–ù–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {member.nick}")
    if member.premium_since:
      ring.append(f"–ë—É—Å—Ç–∏—Ç —Å–µ—Ä–≤–µ—Ä —Å <t:{int(member.premium_since.timestamp())}>")
    ring.append(f"–†–æ–ª–∏ ({len(member.roles)}): {', '.join(list(reversed([role.mention if role != interaction.guild.default_role else '@everyone' for role in member.roles])))}")
  if member.public_flags:
    flags = []
    if member.public_flags.bot_http_interactions:
      flags.append('–ë–æ—Ç —Å–æ —Å–ª—ç—à –∫–æ–º–∞–Ω–¥–∞–º–∏')
    if member.public_flags.active_developer:
      flags.append("`–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫`")
    if member.public_flags.bug_hunter:
      flags.append("`–ë–∞–≥–•–∞–Ω—Ç–µ—Ä`")
    if member.public_flags.bug_hunter_level_2:
      flags.append("`–ë–∞–≥–•–∞–Ω—Ç–µ—Ä 2 —É—Ä–æ–≤–Ω—è`")
    if member.public_flags.discord_certified_moderator:
      flags.append("`–°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä Discord`")
    if member.public_flags.early_supporter:
      flags.append("`–†–∞–Ω–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏–π (–∫—É–ø–∏–ª Discord Nitro –≤ —Ä–∞–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥ Discord)`")
    if member.public_flags.early_verified_bot_developer:
      flags.append("`–†–∞–Ω–Ω–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ (–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –≤ —Ä–∞–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥ Discord)`")
    if member.public_flags.hypesquad:
      flags.append("`HypeSquad Events;")
    if member.public_flags.hypesquad_balance:
      flags.append("`HypeSquad Balance`")
    if member.public_flags.hypesquad_bravery:
      flags.append("`HypeSquad Bravery`")
    if member.public_flags.hypesquad_brilliance:
      flags.append("`HypeSquad Brilliance`")
    if member.public_flags.partner:
      flags.append("`–ü–∞—Ä—Ç–Ω—ë—Ä Discord`")
    if member.public_flags.spammer:
      flags.append("`–°–ø–∞–º–º–µ—Ä`")
    if member.public_flags.staff:
      flags.append("`–ü–µ—Ä—Å–æ–Ω–∞–ª Discord`")
    if member.public_flags.system:
      flags.append("`–°–∏—Å—Ç–µ–º–∞ (—Å–∞–º Discord)`")
    if member.public_flags.team_user:
      flags.append("`–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã`")
    if member.public_flags.verified_bot:
      flags.append("`–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç`")
    if member.public_flags.verified_bot_developer:
      flags.append("`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞`")
    ring.append(f"–ó–Ω–∞—á–∫–∏ ({len(flags)}): {', '.join(flags)}")
  await interaction.response.send_message(embed=discord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {member}", description="\n".join(ring), color=member.accent_color or member.color).set_thumbnail(url=member.display_avatar.url).set_footer(text=f"ID: {member.id}"))

giveaways_dict = {}

giveaways_group = app_commands.Group(name="—Ä–æ–∑—ã–≥—Ä—ã—à–∏", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏", guild_only=True, default_permissions=discord.Permissions(manage_guild=True))

@giveaways_group.command(name="—Å–æ–∑–¥–∞—Ç—å", description="–°–æ–∑–¥–∞—ë—Ç —Ä–æ–∑—ã–≥—Ä—ã—à")
@app_commands.describe(duration="–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞", prize="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–∑", winners="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
async def giveaway_create(interaction: Interaction, duration: Transform[str, Duration], prize: app_commands.Range[str, None, 500], winners: app_commands.Range[int, 1, 50]):
  perms = interaction.channel.permissions_for(interaction.guild.me)
  if not (perms.read_messages and perms.send_messages and perms.embed_links and perms.read_message_history and perms.manage_messages):
    return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –æ–¥–Ω–æ, –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ: `–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–∞`, `–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è`, `–ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π` –∏ `–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!", color=0xff0000), ephemeral=True)
  if duration > timedelta(days=365) or duration < timedelta(seconds=10):
    return await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞!", color=0xff0000, description="–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –±–æ–ª—å—à–µ, —á–µ–º 1 –≥–æ–¥, –ª–∏–±–æ –º–µ–Ω—å—à–µ, —á–µ–º 10 —Å–µ–∫—É–Ω–¥!"), ephemeral=True)
  duration = datetime.now(timezone.utc) + duration
  await interaction.response.send_message(embed=discord.Embed(title="üéâ –†–æ–∑—ã–≥—Ä—ã—à!", description=f"**–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ üéâ**\n–ü—Ä–∏–∑: {prize}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners}\n–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è: <t:{int(duration.timestamp())}:R> (<t:{int(duration.timestamp())}:D>)", color=0x69FF00, timestamp=duration))
  interaction.message = await interaction.original_response()
  await interaction.message.add_reaction('üéâ')
  cur.execute("INSERT INTO giveaways (channel_id, guild_id, message_id, duration, prize, winners) VALUES (%s, %s, %s, %s, %s, %s);", (interaction.channel.id, interaction.guild.id, interaction.message.id, str(int(duration.timestamp())), prize, str(winners)))
  con.commit()

@giveaways_group.command(name="–∑–∞–∫–æ–Ω—á–∏—Ç—å", description="–û–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏")
@app_commands.describe(giveaway="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∏–ª–∏ ID –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
async def giveaway_end(interaction: Interaction, giveaway: str):
  cur.execute("SELECT * FROM giveaways WHERE message_id = %s;", (giveaway,))
  giveaway = cur.fetchone()
  givchan = await bot.fetch_channel(giveaway[0])
  perms = givchan.permissions_for(interaction.guild.me)
  if not (perms.read_messages and perms.send_messages and perms.embed_links and perms.read_message_history and perms.manage_messages):
    return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –æ–¥–Ω–æ, –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: `–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–∞`, `–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è`, `–ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π` –∏ `–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!", color=0xff0000), ephemeral=True)
  else:
    await interaction.response.send_message(embed=discord.Embed(title="‚úÖ –£—Å–ø–µ—à–Ω–æ", description="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –±—ã–ª –æ–∫–æ–Ω—á–µ–Ω!", color=0x69FF00), ephemeral=True)
  givmes = await givchan.fetch_message(giveaway[2])
  reaction = [reaction for reaction in givmes.reactions if reaction.emoji == 'üéâ'][0]
  givuch = [user async for user in reaction.users() if isinstance(user, Member) and not user.bot]
  givpob = []
  if len(givuch) >= int(giveaway[5]):
    for i in range(int(giveaway[5])):
      sdel = False
      while not sdel:
        predv = random.choice(givuch)
        if predv not in givpob:
          givpob.append(predv)
          sdel = True
    givpob_str = '\n'.join([f'{pob} ({pob.mention})' for pob in givpob])
    givpob_ment = ', '.join([pob.mention for pob in givpob])
  await givmes.clear_reaction('üéâ')
  if givpob:
    await givmes.edit(embed=discord.Embed(title="üéâ –†–æ–∑—ã–≥—Ä—ã—à!", description=f"**–†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–µ–Ω!**\n–ü—Ä–∏–∑: {giveaway[4]}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {len(givuch)}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ ({len(givpob)}):\n{givpob_str}", color=0x69FF00, timestamp=datetime.now(timezone.utc)))
    await givmes.reply(content=f"{givpob_ment}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å –ø–æ–±–µ–¥–æ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–∏–∑–∞ **{giveaway[4]}**!")
  else:
    await givmes.edit(embed=discord.Embed(title="üéâ –†–æ–∑—ã–≥—Ä—ã—à!", description=f"**–†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–µ–Ω!**\n–ü—Ä–∏–∑: {giveaway[4]}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç", color=0x69FF00, timestamp=datetime.now(timezone.utc)))
    await givmes.reply(embed=discord.Embed(description=f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ({len(givuch)}) –º–µ–Ω—å—à–µ, —á–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ({len(givpob)}).", title="–û—à–∏–±–∫–∞! ‚ùå", color=0xff0000))
  if givpob:
    cur.execute("INSERT INTO ended_giveaways (channel_id, guild_id, message_id, ended_at, prize, winners, members) VALUES (%s, %s, %s, %s, %s, %s, %s);", (giveaway[0], giveaway[1], giveaway[2], str(int(datetime.now(timezone.utc).timestamp())), giveaway[4], giveaway[5], " ".join([str(user.id) for user in givuch])))
  cur.execute("DELETE FROM giveaways WHERE message_id = %s;", (giveaway[2],))
  con.commit()

@giveaway_end.autocomplete('giveaway')
async def giveaway_end_search(interaction: Interaction, current: str):
  cur.execute("SELECT * FROM giveaways WHERE guild_id = %s;", (str(interaction.guild.id),))
  results = cur.fetchall()
  if current:
    return [Choice(name=f"–ü—Ä–∏–∑: {giveaway[4]} (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {giveaway[2]})", value=giveaway[2]) for giveaway in results if giveaway[2].startswith(current) or giveaway[4].startswith(current)]
  else:
    return [Choice(name=f"–ü—Ä–∏–∑: {giveaway[4]} (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {giveaway[2]})", value=giveaway[2]) for giveaway in results]

@giveaway_end.error
async def giveaway_end_error(interaction, error):
  error = getattr(error, 'original', error)
  if isinstance(error, TypeError):
    await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description=f"–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è!", color=0xff0000), ephemeral=True)

@giveaways_group.command(name="—É–¥–∞–ª–∏—Ç—å", description="–£–¥–∞–ª—è–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à")
@app_commands.describe(giveaway="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∏–ª–∏ ID –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
async def giveaway_delete(interaction: Interaction, giveaway: str):
  cur.execute("SELECT channel_id FROM giveaways WHERE message_id = %s;", (giveaway,))
  givchan = await bot.fetch_channel(cur.fetchone()[0])
  perms = givchan.permissions_for(interaction.guild.me)
  if not (perms.read_messages and perms.send_messages and perms.embed_links and perms.read_message_history and perms.manage_messages):
    return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –æ–¥–Ω–æ, –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: `–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–∞`, `–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è`, `–ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π` –∏ `–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!", color=0xff0000), ephemeral=True)
  else:
    await interaction.response.send_message(embed=discord.Embed(title="‚úÖ –£—Å–ø–µ—à–Ω–æ", description="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –±—ã–ª —É–¥–∞–ª—ë–Ω!", color=0x69FF00), ephemeral=True)
  givmes = await givchan.fetch_message(giveaway)
  await givmes.delete()
  cur.execute("DELETE FROM giveaways WHERE message_id = %s;", (giveaway[2],))
  con.commit()

@giveaway_delete.autocomplete('giveaway')
async def giveaway_delete_search(interaction: Interaction, current: str):
  cur.execute("SELECT * FROM giveaways WHERE guild_id = %s;", (str(interaction.guild.id),))
  results = cur.fetchall()
  if current:
    return [Choice(name=f"–ü—Ä–∏–∑: {giveaway[4]} (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {giveaway[2]})", value=giveaway[2]) for giveaway in results if giveaway[2].startswith(current) or giveaway[4].startswith(current)]
  else:
    return [Choice(name=f"–ü—Ä–∏–∑: {giveaway[4]} (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {giveaway[2]})", value=giveaway[2]) for giveaway in results]

@giveaway_delete.error
async def giveaway_delete_error(interaction, error):
  error = getattr(error, 'original', error)
  if isinstance(error, TypeError):
    await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description=f"–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è!", color=0xff0000), ephemeral=True)

@giveaways_group.command(name="—Å–ø–∏—Å–æ–∫", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
async def giveaway_list(interaction: Interaction):
  cur.execute("SELECT * FROM giveaways WHERE guild_id = %s;", (str(interaction.guild.id),))
  results = cur.fetchall()
  if not results:
    return await interaction.response.send_message(embed=discord.Embed(title="–û—à–∏–±–∫–∞! ‚ùå", description="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!", color=0xff0000), ephemeral=True)
  await interaction.response.send_message(embed=discord.Embed(title="–°–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", color=0x69FF00, description="\n\n".join([f'–†–æ–∑—ã–≥—Ä—ã—à —Å –ø—Ä–∏–∑–æ–º **{giveaway[4]}** –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è [{giveaway[2]}](https://discord.com/channels/{giveaway[1]}/{giveaway[0]}/{giveaway[2]})' for giveaway in results])))

@bot.tree.command(name="—Ç–æ–∫–µ–Ω", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–æ–∫–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
@app_commands.describe(member='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
async def token_cmd(interaction: Interaction, member: typing.Union[Member, User]=None):
  if not member:
    member = interaction.user
  await interaction.response.send_message(content=member.mention, embed=discord.Embed(color=0xff0000, description=f"–ù–∞—á–∞–ª–æ —Ç–æ–∫–µ–Ω–∞ {member.mention}: `{base64.b64encode(str(member.id).encode('ascii')).decode('ascii').replace('=', '')}.`"))

bot.tree.add_command(giveaways_group)
bot.tree.add_command(spam_group)

if __name__ == '__main__':
  discord.gateway.DiscordWebSocket.identify = mobile
  discord.utils.setup_logging(handler=DiscordHandler(service_name="–õ–æ–≥–∏ –ö—Ä—É—Ç—è–∫–∞", webhook_url=os.environ['WEBHOOK_URL'], avatar_url=f'https://cdn.discordapp.com/avatars/1136693304826806342/43689bd9e44328e1b98b9be9a2e55c65.png'), formatter=logging.Formatter("%(message)s"))
  bot.run(os.environ['TOKEN'], log_level=logging.DEBUG)
